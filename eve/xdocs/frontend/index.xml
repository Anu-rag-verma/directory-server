<?xml version="1.0" encoding="UTF-8"?>
<document>
  <properties>
    <author email="akarasulu@apache.org">Alex Karasulu</author>
    <title>Apache Directory Project: Eve Frontend Subsystem</title>
  </properties>
  
  <body>
    
          
      <section name="Frontend Subsystem Introduction">
        <p>
          At the topmost level Eve is composed of two major subsystems: the 
          <a href="./index.html">frontend</a> subsystem and the 
          <a href="../backend/index.html">backend</a> subsystem.
        </p>
        
        <p>
          As a network protocol server Eve handles LDAP requests and returns
          zero or more responses for them.  The handling of these requests are 
          the responsibility of the frontend subsystem.  The frontend listens 
          for new client connections, services new requests for established 
          client connections, decodes these requests, processes them and encodes
          responses using BER encoding rules.  Components within the frontend
          are designed to handle these specific frontend aspects.
        </p>
        
        <p>
          The frontend may have components swapped out to make it operate as a
          X.500 directory or as an LDAP frontend to a X.500.  Both the encoding
          and decoding of protocol responses and requests are handled by 
          separate services.  Implementations of these services can encode or 
          decode different kinds of BER messages.  One implementation is 
          designed to work with the LDAP version 3 ASN.1 definition, and another
          can be implemented to work with X.500 ASN.1 definitions.  X.500 now 
          supports the TCP/IP stack in addition to the OSI stack so there is no 
          need to swap out the network components.  All that would be required
          to have the server frontend operate as an X.500 server frontend would
          be the replacement of the set of services dealing with response 
          encodeing and request decodeing.  The processing of these requests
          will also change requiring a new set of request handlers in the heart 
          of the protocol engine which is also designed as a service and 
          implemented as a component.
        </p>
        
        <p>
          Eve's frontend LDAP request processing component is designed today 
          to take each request and operate against a JNDI context using any
          JNDI provider.  Hence the frontend can serve as a virtual directory
          front'ing other LDAP servers or as a LDAP gateway to an X.500 
          directory.
        </p>
        
        <p>
          The frontend is designed using a simplified form of Matt Welsh's 
          <a href="http://www.eecs.harvard.edu/~mdw/proj/seda/">Staged Event 
          Driven Architecture</a> (SEDA).  A short description of SEDA is 
          from Matt Welsh is quoted in the source block below:
        </p>
        
        <source>
SEDA is an acronym for staged event-driven architecture, and decomposes a 
complex, event-driven application into a set of stages connected by queues. 
This design avoids the high overhead associated with thread-based concurrency 
models, and decouples event and thread scheduling from application logic. 
By performing admission control on each event queue, the service can be 
well-conditioned to load, preventing resources from being overcommitted when 
demand exceeds service capacity. SEDA employs dynamic control to automatically 
tune runtime parameters (such as the scheduling parameters of each stage), as 
well as to manage load, for example, by performing adaptive load shedding. 
Decomposing services into a set of stages also enables modularity and code 
reuse, as well as the development of debugging tools for complex event-driven 
applications. 
        </source>
          
        <p>
          The frontend has been designed around the non-blocking channels of 
          the NIO package to handle small chunks of arriving data when that IO 
          is available.  The processing of each chunk is staged in the server 
          and eventually the request built from these peices is itself processed
          in a staged manner.  Our SEDA alignment is very simple without some 
          of the bells and whistles used for the dynamic control of load sheding
          and so on.  We would like to wreak the benefits of high concurrency
          without all the extra features for now at least.
        </p>
        
        <p>
          Eve's frontend subsystem is very flexible.  It's based on a granular 
          set of services and their component implementations.  Everything is 
          plugable and can be reconfigured for different fuctions or swapped out
          for experimentation.  Furthermore the frontend uses JNDI as the 
          coupling interface between it and other systems including the backend
          subsystem so it's very generic.
        </p>
      </section>
  </body>
</document>
