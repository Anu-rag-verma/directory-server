<?xml version="1.0" encoding="UTF-8"?>
<document>
  <properties>
    <author email="akarasulu@apache.org">Alex Karasulu</author>
    <title>Apache Directory Project: Requirements</title>
  </properties> 
  
  <body>
    <section name="Requirements">
      <p>
        The following requiremest are what drive the design of Eve's frontend:
      </p>

      <ul>
        <li>
          Try to remain as protocol independent as possible so components can 
          easily be interchanged to offer both an LDAP configuration and an 
          X.500 (over IP) configuration.
        </li>
      
        <li>
          The frontend should facilitate experimentation with new features 
          and aspects of the protocol.  This leads to several subordinate 
          requirements: 
          <ul>
            <li>
              a component based plugable architecture
            </li>
            <li>
              micro-kernel (container) independence
            </li>
            <li>
              clear separation of concerns
            </li>
          </ul>
        </li>

        <li>
          Detachable frontend: the frontend should not need to be coupled 
          with the backend subsystem to operate.  The two master subsystems
          should be independent.  This allows for the two parts to be easily
          replaced and for frontends to be used as gateways to other servers
          or virtual directories.
        </li>
        
        <li>
          The frontend should be binary compatible across operating systems 
          to avoid recompilation or conditional compilation.  There should 
          be a zero porting effort.  We want to write and build this once to
          run everywhere.
        </li>
        
        <li>
          Design frontend request processors to interface with JNDI 
          providers.  To facilitate a loose couple between the frontend
          and backend master subsystems we need a published and common
          API.  The JNDI is a standard Java API with the 1.3 SDK and up.
          Using the JNDI to process requests also keeps the learning curve 
          small for those altering the request processors.  The processors
          appear like simple JNDI clients and this JNDI code can be written 
          and tested outside of the server's frontend.
        </li>
        
        <li>
          Eve's frontend must be able to support thousands of concurrent 
          connections without a linear degradation of performance.  This 
          requirement leads to the need for non-blocking IO and the use of
          NIO channels.
        </li>
        
        <li>
          Responsiveness to requests with heavy load is also a requirement.
        </li>
        <li>Frontend end source should be easily modified.</li>
        <li>Frontend end should be easily built.</li>
        <li>Frontend should be easily configured.</li>
        <li>Frontend should be easily deployed or installed.</li>
        <li>Have a plethora of documentation.</li>
      </ul>
    </section>
      
      
    <section name="Nice-to-Haves">
      <p>
        These are requirements that if imposed would lead to nice to have 
        features but they never made it to the critical list.  Hence they're
        not requirements but nice to have guide lines.
      </p>
      
      <ul>
        <li>None yet!</li>
      </ul>
    </section>

  </body>
</document>
