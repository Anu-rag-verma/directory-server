<?xml version="1.0" encoding="UTF-8"?>
<document>
  <properties>
    <author email="akarasulu@apache.org">Alex Karasulu</author>
    <title>Apache Directory Project: Components and Services</title>
  </properties>
  
  <body>
    <section name="TODO">
      <ul>
        <li>
          Talk about not taking advantage of container specific functionality
          within pojo implementations.
        </li>
        
        <li>
          Talk more about the service interface.  Talk about how dependencies 
          are between services not components.
        </li>
        
        <li>
          Break this section down a little better.  It's all in one clump.
        </li>
      </ul>
    </section>
    
    <section name="Design">
      <subsection name="Components and Services">
        <p>
          The server is designed as a system of highly granular components.
          Some components are a collection of other components with a facade to 
          form a subsystem of the server.  Subsystems can contain other 
          subsystems and one component can depend on zero or more other
          components.
        </p>
        
        <p>
          If the following paragraphs sounds a little confusing you might want 
          to read a little about the IoC pattern and there is no better place 
          than Avalon for that.  Below are some Avalon documents you might find
          useful when translating some of this babble:
        </p>
        
        <ul>
          <li><a href=
          "http://avalon.apache.org/framework/cop/guide-patterns-ioc.html">
          Inversion of Control Pattern</a></li>
          
          <li><a href="http://avalon.apache.org/framework/cop/index.html">
          Component Oriented Programing</a></li>
        </ul>

        <p>
          A micro kernel or component container is required to run the server.
          A micro kernel is a peice of code operating as a component container 
          providing services for that component and running the component 
          through a set of life-cycles.  Eve is designed to run on any micro 
          kernel using component wrappers.  Her subsystems and components are 
          designed as Plain Old Java Objects (POJOs) that can be wrapped to 
          make them interoperate within different containers.  Eve is slated to 
          work with both Merlin and PicoContainer, but there are no restrictions
          to using containers like Loom, Plexus, or Phoenix.
        </p>
        
        <p>
          Each component within Eve has a public service interface which 
          declares what that component can do for its clients.  The service
          interface is kept and packaged separately from any component 
          implementation.  The separation is achieved by using a different maven
          project hence build jar for the SPI and the implementations of that
          service.  An SPI project is often used to contain the service 
          interface and other interfaces associated with the component.  
          Providers of the service must implement the interfaces in the SPI.
        </p>
        
        <p>
          The drive behind this approach has to do with modularity and 
          classloader schemes.  It is always good to keep 
          the interfaces separate from any specific implementations.  You can 
          have many implementations for the same service interface.  Secondly
          the classloader heirarchy in containers often puts implementation
          classloaders under a classloader containing the service interface. 
          This allows containers to manage multiple implementations for the
          same service without having conflicts.  Also implementations can be
          created and destroyed in separate classloaders without affecting one
          another.
        </p>
      </subsection>
    </section>
  </body>
</document>