<?xml version="1.0" encoding="utf-8"?>
<!-- Licensed to the Apache Software Foundation (ASF) under one or more contributor license agreements. See the NOTICE file 
  distributed with this work for additional information regarding copyright ownership. The ASF licenses this file to you under 
  the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with the License. You may 
  obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0 Unless required by applicable law or agreed to 
  in writing, software distributed under the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF 
  ANY KIND, either express or implied. See the License for the specific language governing permissions and limitations under 
  the License. -->
<chapter
  version="5.0"
  xmlns="http://docbook.org/ns/docbook"
  xmlns:xlink="http://www.w3.org/1999/xlink"
  xmlns:xi="http://www.w3.org/2001/XInclude"
  xmlns:ns5="http://www.w3.org/2000/svg"
  xmlns:ns4="http://www.w3.org/1998/Math/MathML"
  xmlns:ns3="http://www.w3.org/1999/xhtml"
  xml:lang="en">
  <title>Basic Security</title>
  <section
    id="Authentication options">
    <title>Authentication options</title>
    <para>This section describes the authentication options of ApacheDS 1.5. Anonymous and simple binds are supported,
      as well as SASL mechanisms. Configuring and using the first two of them is described below with the help of
      examples.</para>
    <itemizedlist>
      <listitem>
        <para>
          <xref
            linkend="What is authentication?" />
        </para>
      </listitem>
      <listitem>
        <para>
          <xref
            linkend="Simple binds" />
        </para>
      </listitem>
      <listitem>
        <para>
          <xref
            linkend="Passwords stored one-way encrypted" />
        </para>
      </listitem>
      <listitem>
        <para>
          <xref
            linkend="Anonymous binds" />
        </para>
      </listitem>
      <listitem>
        <para>
          <xref
            linkend="How to authenticate a user by uid and password?" />
        </para>
      </listitem>
      <listitem>
        <para>
          <xref
            linkend="Resources encryption" />
        </para>
      </listitem>
    </itemizedlist>
    <section
      id="What is authentication?">
      <title>What is authentication?</title>
      <para>
        <emphasis
          role="bold">Authentication</emphasis>
        is the process of determining whether someone (or something) in fact is what he/she/it asserts to be.
      </para>
      <para>
        Within ApacheDS you will likely want to authenticate clients in order to check whether they are allowed to read,
        add or manipulate certain data stored within the directory. The latter, i.e. whether an authenticated client is
        permitted to do something, is deduced during
        <emphasis
          role="bold">authorization</emphasis>
        .
      </para>
      <para>Quite often, the process of authentication is delegated to a directory service by other software components.
        Because in doing so, authentication data (e.g. username, password) and authorization data (e.g. group
        relationships) are stored and managed centrally in the directory, and all connected software solutions benefit
        from it. The integration sections of this guide provide examples for Apache Tomcat, Apache HTTP servers, and
        others.</para>
      <para>
        ApacheDS 1.5 supports simple authentication and anonymous binds while storing passwords within
        <emphasis>userPassword</emphasis>
        attributes in user entries. Passwords can be stored in clear text or one-way encrypted with a hash algorithm
        like MD5 or SHA1. Since version 1.5.1, SASL mechanism are supported as well. We start with anonymous binds.
      </para>
    </section>
    <section
      id="Simple binds">
      <title>Simple binds</title>
      <para>Authentication via simple bind is widely used. The method is supported by ApacheDS 1.5 for all person
        entries stored within any partition, if they contain a password attribute. How does it work? An LDAP client
        provides the DN of a user entry and a password to the server, the parameters of the bind operation. ApacheDS
        checks whether the given password is the same as the one stored in the userpassword attribute of the given
        entry. If not, the bind operation fails (LDAP error code 49, LDAP_INVALID_CREDENTIALS), and the user is not
        authenticated.</para>
      <section
        id="Using command line tools">
        <title>Using command line tools</title>
        <para>Assume this entry from the Seven Seas partition is stored within the directory (only a fragment with the
          relevant attributes is shown).</para>
        <programlisting><![CDATA[
dn: cn=Horatio Hornblower,ou=people,o=sevenSeas
objectclass: person
objectclass: organizationalPerson
cn: Horatio Hornblower
sn: Hornblower
userpassword: pass
...
        ]]></programlisting>
        <para>In the following search command, a user tries to bind with the given DN (option -D) but a wrong password
          (option -w). The bind fails and the command terminates without performing the search.</para>
        <screen><![CDATA[
$ ldapsearch -h zanzibar -p 10389 -D "cn=Horatio Hornblower,ou=people,o=sevenSeas" \\
    -w wrong -b "ou=people,o=sevenSeas" -s base "(objectclass=*)"
ldap_simple_bind: Invalid credentials
ldap_simple_bind: additional info: Bind failed: null
        ]]></screen>
        <para>If the user provides the correct password during the call of the ldapsearch command, the bind operation
          succeeds and the seach operation is performed afterwards.</para>
        <screen><![CDATA[
$ ldapsearch -h zanzibar -p 10389 -D "cn=Horatio Hornblower,ou=people,o=sevenSeas" \\
    -w pass -b "ou=people,o=sevenSeas" -s base "(objectclass=*)"
version: 1
dn: ou=people,o=sevenSeas
ou: people
description: Contains entries which describe persons (seamen)
objectclass: organizationalUnit
objectclass: top
        ]]></screen>
      </section>
      <section
        id="Binds from Java components using JNDI">
        <title>Binds from Java components using JNDI</title>
        <para>Using JNDI, authentication via simple binds is accomplished by appropriate configuration. One option is to
          provide the parameters in a Hashtable object like this</para>
        <example
          id="Binds from Java components using JNDI listing">
          <title>Binds from Java components using JNDI</title>
          <programlisting><![CDATA[
import java.util.Hashtable;

import javax.naming.Context;
import javax.naming.InitialContext;
import javax.naming.NamingEnumeration;
import javax.naming.NamingException;

public class SimpleBindDemo {

    public static void main(String[] args) throws NamingException {

        if (args.length < 2) {
            System.err.println("Usage: java SimpleBindDemo <userDN> <password>");
            System.exit(1);
        }

        Hashtable env = new Hashtable();
        env.put(Context.INITIAL_CONTEXT_FACTORY, "com.sun.jndi.ldap.LdapCtxFactory");
        env.put(Context.PROVIDER_URL, "ldap://zanzibar:10389/o=sevenSeas");

        env.put(Context.SECURITY_AUTHENTICATION, "simple");
        env.put(Context.SECURITY_PRINCIPAL, args[0]);
        env.put(Context.SECURITY_CREDENTIALS, args[1]);

        try {
            Context ctx = new InitialContext(env);
            NamingEnumeration enm = ctx.list("");
            while (enm.hasMore()) {
                System.out.println(enm.next());
            }
            ctx.close();
        } catch (NamingException e) {
            System.out.println(e.getMessage());
        }
    }
}
        ]]></programlisting>
        </example>
        <para>If the DN of a user entry and the fitting password are provided as command line arguments, the program
          binds successfully and performs a search:</para>
        <programlisting><![CDATA[
$ java SimpleBindDemo "cn=Horatio Hornblower,ou=people,o=sevenSeas" pass
ou=people: javax.naming.directory.DirContext
ou=groups: javax.naming.directory.DirContext
        ]]></programlisting>
        <para>
          On the other hand, providing an incorrect password results in a failed bind operation. JNDI maps it to a
          <emphasis>NamingException</emphasis>
          :
        </para>
        <screen><![CDATA[
$ java SimpleBindDemo "cn=Horatio Hornblower,ou=people,o=sevenSeas" quatsch
[LDAP: error code 49 - Bind failed: null]
        ]]></screen>
        <para>
          In real life, you obviously want to separate most of the configuration data from the source code, for instance
          with the help of the
          <emphasis>jndi.properties</emphasis>
          file.
        </para>
      </section>
    </section>
    <section
      id="Passwords stored one-way encrypted">
      <title>Passwords stored one-way encrypted</title>
      <para>
        If passwords are stored in the directory in clear like above, the administrator (
        <emphasis>uid=admin,ou=system</emphasis>
        ) is able to read them. This holds true even if authorization is enabled. The passwords would also be visible in
        exported LDIF files. This is often unacceptable.
      </para>
      <warning>
        Not only the administrator will be able to read your password, or be visible in LDIF files, but if one
        does
        not use SSL, the the password is transmitted in clear text above the wire...
      </warning>
      <section
        id="Passwords not stored in clear text">
        <title>Passwords not stored in clear text</title>
        <para>
          ApacheDS does also support simple binds, if user passwords are stored one-way encrypted. An LDAP client, which
          creates user entries, applies a hash-function (SHA for instance) to the user passwords beforehand, and stores
          the users with these fingerprints as
          <emphasis>userpassword</emphasis>
          values (instead of the clear text values), for instance:
        </para>
        <programlisting><![CDATA[
dn: cn=Horatio Hornblower,ou=people,o=sevenSeas
objectclass: person
objectclass: organizationalPerson
cn: Horatio Hornblower
sn: Hornblower
userpassword: {SHA}nU4eI71bcnBGqeO0t9tXvY1u5oQ=
...
        ]]></programlisting>
        <para>The value "{SHA}nU4eI71bcnBGqeO0t9tXvY1u5oQ=" means that SHA (Secure Hash Algorithm) was applied to the
          password, and "nU4eI71bcnBGqeO0t9tXvY1u5oQ=" was the result (Base-64 encoded). Please note that it is not
          possible to calculate the source ("pass" in our case) back from the result. This is why it is called one-way
          encrypted – it is rather difficult to decrypt it. One may guess many times, calculate the hash values (the
          algorithms are public) and compare the result. But this would take a long time, especially if you choose a
          more complex password than we did ("pass"). </para>
      </section>
      <section
        id="But how to obtain the hash value for a password?">
        <title>But how to obtain the hash value for a password?</title>
        <para>With some lines of code, it is quite easy to accomplish this task programatically in Java:</para>
        <example
          id="Obtain the hash value for a password programatically">
          <title>Obtain the hash value for a password programatically</title>
          <programlisting><![CDATA[
import java.security.MessageDigest;
import java.security.NoSuchAlgorithmException;
import sun.misc.BASE64Encoder;

public class DigestDemo {
    public static void main(String[] args) throws NoSuchAlgorithmException {
        String password = "pass";
        String algorithm = "SHA";
        
        // Calculate hash value
        MessageDigest md = MessageDigest.getInstance(algorithm);
        md.update(password.getBytes());
        byte[] bytes = md.digest();
        
        // Print out value in Base64 encoding
        BASE64Encoder base64encoder = new BASE64Encoder();
        String hash = base64encoder.encode(bytes);        
        System.out.println('{'+algorithm+'}'+hash);
    }
}
      ]]></programlisting>
        </example>
        <para>The output is "{SHA}nU4eI71bcnBGqeO0t9tXvY1u5oQ=".</para>
        <para>
          Another option is to use command line tools to calculate the hash value; the
          <link
            xlink:href="http://www.openssl.org/">OpenSSL</link>
          project provides such
          stuff. Furthermore many UI LDAP tools allow you to store passwords automatically
          encrypted with the hash
          algorithm of your choice. See below
          <link
            xlink:href="http://directory.apache.org/studio/">Apache Directory Studio</link>
          as an example. The dialog automatically shows up
          if a userPassword attribute is to be manipulated (added,
          changed).
        </para>
        <figure
          id="Password Editor figure">
          <title>Password Editor</title>
          <mediaobject>
            <imageobject>
              <imagedata
                fileref="images/password_edit_ls.png" />
            </imageobject>
          </mediaobject>
        </figure>
      </section>
      <section
        id="From an LDAP client point of view">
        <title>From an LDAP client point of view</title>
        <para>From an LDAP client point of view, the behavior during authentication is the same as with passwords stored
          in clear. During a simple bind, a client sends DN and password (unencrypted, i.e. no hash algorithm applied)
          to the server. If ApacheDS detects, that the user password for the given DN is stored in the directory with a
          hash function applied, it calculates the hash value of the given password with the appropriate algorithm (this
          is why the algorithm is stored together with the hashed password). Afterwards it compares the result with the
          stored attribute value. In case of a match, the bind operation ends successfully:</para>
        <screen><![CDATA[
$ ldapsearch -h zanzibar -p 10389 -D "cn=Horatio Hornblower,ou=people,o=sevenSeas" \\ 
    -w pass -b "ou=people,o=sevenSeas" -s base "(objectclass=*)"
version: 1
dn: ou=people,o=sevenSeas
ou: people
description: Contains entries which describe persons (seamen)
objectclass: organizationalUnit
objectclass: top
      ]]></screen>
        <para>
          Providing the hashed value of the
          <emphasis>userPassword</emphasis>
          attribute instead of the original value will be rejected by ApacheDS:
        </para>
        <screen><![CDATA[
$ ldapsearch -h zanzibar -p 10389 -D "cn=Horatio Hornblower,ou=people,o=sevenSeas" \\
    -w "{SHA}nU4eI71bcnBGqeO0t9tXvY1u5oQ=" -b "ou=people,o=sevenSeas" -s base "(objectclass=*)"
ldap_simple_bind: Invalid credentials
ldap_simple_bind: additional info: Bind failed: null
      ]]></screen>
        <para>This is intended. If someone was able to catch this value (from an LDIF export for instance), s/he must
          still provide the password itself in order to get authenticated.</para>
        <important>
          <para>
            <emphasis
              role="bold">Be Warned: Limited security added</emphasis>
          </para>
          <para>Please note that storing user passwords one-way encrypted only adds limited security. During the bind
            operation, the credentials are still transmitted unencrypted, if no SSL/TLS communication is used (thus
            you
            should definitely consider to do so). </para>
          <para>Furthermore, if someone gets an LDIF file with userpassword values digested with SHA etc., s/he may be
            able to determine some of the passwords with brute force. Calculation of hash functions can be done very
            fast, and the attacker can attempt millions of values with ease, without you getting notice of it.
            Therefore
            protect your data, even if one-way encryption is applied to the passwords!</para>
        </important>
      </section>
    </section>
    <section
      id="Anonymous binds">
      <title>Anonymous binds</title>
      <para>In some occasions it is appropriate to allow LDAP clients to permit operations without authentication. If
        data managed by the directory service is well known by all clients, it is not uncommon to allow search
        operations (not manipulation) within this data to all clients – without providing credentials. An example for
        this are enterprise wide telephone books, if clients access the directory service from the intranet.</para>
      <section
        id="Enable/disable anonymous binds">
        <title>Enable/disable anonymous binds</title>
        <para>
          Anonymous access is enabled by default. Changing this is one of the basic configuration tasks. If you use
          the
          server standalone configured with a
          <emphasis>server.xml</emphasis>
          file, you can enable/disable it by changing the value for
          property
          <emphasis>allowAnonymousAccess</emphasis>
          in the Spring bean definition for bean
          <emphasis>defaultDirectoryService</emphasis>
          , as depicted in
          the following fragment:
        </para>
        <programlisting><![CDATA[
<defaultDirectoryService id="directoryService" instanceId="default"
                           ...
                           allowAnonymousAccess="false"
                           ...>
      ]]></programlisting>
        <para>A restart of the server is necessary for this change to take effect.</para>
      </section>
      <section
        id="Example: Server behavior with anonymous binds disabled">
        <title>Example: Server behavior with anonymous binds disabled</title>
        <para>Now the same command performed against ApacheDS 1.5 with anonymous access enabled as described above. The
          behavior is different – the entry is visible.</para>
        <screen><![CDATA[
$ ldapsearch -h zanzibar -p 10389 -b "ou=people,o=sevenSeas" -s base "(objectclass=*)"
version: 1
dn: ou=people,o=sevenSeas
ou: people
description: Contains entries which describe persons (seamen)
objectclass: organizationalUnit
objectclass: top
      ]]></screen>
      </section>
      <section
        id="Other clients">
        <title>Other clients</title>
        <para>
          The examples above have used a command line tool. Of course graphical tools and programmatical access (JNDI
          etc.) allow anonymous binds as well. Below is a screen shot from the configuration dialog of
          <link
            xlink:href="http://directory.apache.org/studio/">Apache Directory Studio</link>
          as an example. During configuration of the connection data ("New LDAP Connection", for instance), the option
          <emphasis>Anonymous Authentication</emphasis>
          leads to anonymous binds. Other UI tools offer this feature as well.
        </para>
        <figure
          id="Anonymous Authentication figure">
          <title>Anonymous Authentication</title>
          <mediaobject>
            <imageobject>
              <imagedata
                fileref="images/authentication_options_ls.png" />
            </imageobject>
          </mediaobject>
        </figure>
        <important>
          <para>
            <emphasis
              role="bold">Use this feature wisely</emphasis>
          </para>
          <para>
            With anonymous access enabled it is not only possible to search the directory without providing username
            and
            password. With autorization disabled, anonymous users may also be able to modify data. It is therefore
            highly recommended to enable and configure the authorization subsystem as well. Learn more about
            authorization in the
            <xref
              linkend="Basic authorization" />
            section
          </para>
        </important>
      </section>
    </section>
    <section
      id="How to authenticate a user by uid and password?">
      <title>How to authenticate a user by uid and password?</title>
      <para>
        If you want to use simple binds with user DN and password within a Java component, in order to authenticate
        users programatically, in practice one problem arises: Most users do not know their DN. Therefore they will not
        be able to enter it. And even if they know it, it would be frequently very laborious due to the length of the
        DN. It would be easier for a user if s/he only has to probvide a short, unique
        <emphasis>ID</emphasis>
        and the password, like in this
        web form
      </para>
      <figure
        id="Authenticate a user by uid and password figure">
        <title>Authenticate a user by uid and password</title>
        <mediaobject>
          <imageobject>
            <imagedata
              fileref="images/confluence_logon.png" />
          </imageobject>
        </mediaobject>
      </figure>
      <para>
        Usually the ID is an attribute within the user's entry. In our sample data (Seven Seas), each user entry
        contains the
        <emphasis>uid</emphasis>
        attribute, for instance uid=hhornblo for Captain Hornblower:
      </para>
      <programlisting><![CDATA[
dn: cn=Horatio Hornblower,ou=people,o=sevenSeas
objectclass: person
objectclass: organizationalPerson
objectclass: inetOrgPerson
objectclass: top
cn: Horatio Hornblower
description: Capt. Horatio Hornblower, R.N
givenname: Horatio
sn: Hornblower
uid: hhornblo
mail: hhornblo@royalnavy.mod.uk
userpassword: {SHA}nU4eI71bcnBGqeO0t9tXvY1u5oQ=
      ]]></programlisting>
      <para>But how to authenticate a user who provides "hhornblo"/"pass" instead of "cn=Horatio
        Hornblower,ou=people,o=sevenSeas"/"pass" with the help of ApacheDS?</para>
      <section
        id="An algorithm">
        <title>An algorithm</title>
        <para>In order to accomplish this task programmatically, one option is to perform the following steps</para>
      </section>
      <section>
        <title>Arguments</title>
        <itemizedlist>
          <listitem>
            <para>
              <emphasis>uid</emphasis>
              of a user (e.g. "hhornblow")
            </para>
          </listitem>
          <listitem>
            <para>
              <emphasis>password</emphasis>
              proclaimed to be correct for the user
            </para>
          </listitem>
        </itemizedlist>
      </section>
      <section>
        <title>Steps</title>
        <orderedlist>
          <listitem>
            <para>Bind to ApacheDS anonymously, or with the DN of a technical user. In both cases it must be possible to
              search the directory afterwards (authorization has to be configured that way)</para>
          </listitem>
          <listitem>
            <para>
              Perform a search operation with an appropriate filter to find the user entry for the given ID, in our case
              "(&amp;(objectClass=inetorgperson)(uid=hhornblo))"
              <itemizedlist
                mark="opencircle">
                <listitem>
                  <para>If the search result is empty, the user does not exist – terminate</para>
                </listitem>
                <listitem>
                  <para>If the search result contains more than one entry, the given ID is not unique, this is likely a
                    data error within your directory</para>
                </listitem>
              </itemizedlist>
            </para>
          </listitem>
          <listitem>
            <para>
              Bind to ApacheDS with the DN of the entry found in the previous search, and the
              <emphasis>password</emphasis>
              provided as argument
              <itemizedlist
                mark="opencircle">
                <listitem>
                  <para>If the bind operation fails, the password is wrong, and the result is false (not authenticated)
                  </para>
                </listitem>
                <listitem>
                  <para>If the bind is successful, authenticate the user</para>
                </listitem>
              </itemizedlist>
            </para>
          </listitem>
        </orderedlist>
      </section>
      <section
        id="Sample code with JNDI">
        <title>Sample code with JNDI</title>
        <para>The algorithm described above is implemented by many software solutions which are able to integrate LDAP
          directories. You will learn more about some of them and their configuration options within a later section of
          this guide</para>
        <para>For illustration purposes, here is a simple Java program which performs the steps with the help of JNDI.
          It uses anonymous bind for the first step, hence it must be enabled (replace with a technical user, if it
          better meets your requirements).</para>
        <example
          id="Sample code with JNDI example">
          <title>Sample code with JNDI</title>
          <programlisting><![CDATA[
import java.util.Hashtable;
import javax.naming.Context;
import javax.naming.NamingEnumeration;
import javax.naming.NamingException;
import javax.naming.directory.DirContext;
import javax.naming.directory.InitialDirContext;
import javax.naming.directory.SearchControls;
import javax.naming.directory.SearchResult;

public class AdvancedBindDemo {

    public static void main(String[] args) throws NamingException {

        if (args.length < 2) {
            System.err.println("Usage: java AdvancedBindDemo <uid> <password>");
            System.exit(1);
        }

        Hashtable env = new Hashtable();
        env.put(Context.INITIAL_CONTEXT_FACTORY, "com.sun.jndi.ldap.LdapCtxFactory");
        env.put(Context.PROVIDER_URL, "ldap://zanzibar:10389/");
        env.put(Context.SECURITY_AUTHENTICATION, "simple");
        
        String uid = args[0];
        String password = args[1];

        DirContext ctx = null;
        try {            
            // Step 1: Bind anonymously            
            ctx = new InitialDirContext(env);
            
            // Step 2: Search the directory
            String base = "o=sevenSeas";
            String filter = "(&(objectClass=inetOrgPerson)(uid={0}))";           
            SearchControls ctls = new SearchControls();
            ctls.setSearchScope(SearchControls.SUBTREE_SCOPE);
            ctls.setReturningAttributes(new String[0]);
            ctls.setReturningObjFlag(true);
            NamingEnumeration enm = ctx.search(base, filter, new String[] { uid }, ctls);
            
            String dn = null;
            if (enm.hasMore()) {
                SearchResult result = (SearchResult) enm.next();
                dn = result.getNameInNamespace();
                
                System.out.println("dn: "+dn);
            }
            
            if (dn == null || enm.hasMore()) {
                // uid not found or not unique
                throw new NamingException("Authentication failed");
            }
            
            // Step 3: Bind with found DN and given password
            ctx.addToEnvironment(Context.SECURITY_PRINCIPAL, dn);
            ctx.addToEnvironment(Context.SECURITY_CREDENTIALS, password);
            // Perform a lookup in order to force a bind operation with JNDI
            ctx.lookup(dn);
            System.out.println("Authentication successful");
            
        } catch (NamingException e) {
            System.out.println(e.getMessage());
        } finally {
            ctx.close();
        }
    }
}
      ]]></programlisting>
        </example>
        <para>Some example calls:</para>
        <screen><![CDATA[
$ java AdvancedBindDemo unknown sailor
Authentication failed

$ java AdvancedBindDemo hornblo pass
dn: cn=Horatio Hornblower,ou=people,o=sevenSeas
Authentication successful

$ java AdvancedBindDemo hornblo quatsch
dn: cn=Horatio Hornblower,ou=people,o=sevenSeas
[LDAP: error code 49 - Bind failed: null]
      ]]></screen>
        <para>
          The examples consist of an unknown user (an
          <emphasis>inetOrgPerson</emphasis>
          entry with uid=unknown does not exist), a successful authenttication, and an attempt with an existing uid but
          a wrong password.
        </para>
      </section>
    </section>
    <section
      id="Resources encryption">
      <title>Resources</title>
      <itemizedlist>
        <listitem>
          <para>
            <link
              xlink:href="http://www.faqs.org/rfcs/rfc2829.html">RFC 2829</link>
            Authentication Methods for LDAP
          </para>
        </listitem>
        <listitem>
          <para>
            <link
              xlink:href="http://www.secure-hash-algorithm-md5-sha-1.co.uk/">The Secure Hash Algorithm Directory</link>
            MD5, SHA-1 and HMAC Resources
          </para>
        </listitem>
      </itemizedlist>
    </section>
  </section>
  <section
    id="Basic authorization">
    <title>Basic authorization</title>
    <para>This section describes the default authorization functionality of ApacheDS 1.5, which is very simple. On the
      other hand, it is inadequate for most serious deployments. Therefore a basic example to the "real" authorization
      subsystem is provided as well.</para>
    <itemizedlist>
      <listitem>
        <para>
          <xref
            linkend="What is authorization?" />
        </para>
      </listitem>
      <listitem>
        <para>
          <xref
            linkend="Default authorization behavior for directory operations" />
        </para>
      </listitem>
      <listitem>
        <para>
          <xref
            linkend="Simple example for the ACI subsystem" />
        </para>
      </listitem>
      <listitem>
        <para>
          <xref
            linkend="Verification, that it works" />
        </para>
      </listitem>
      <listitem>
        <para>
          <xref
            linkend="Resources Basic Authorization" />
        </para>
      </listitem>
    </itemizedlist>
    <section
      id="What is authorization?">
      <title>What is authorization?</title>
      <para>After authentication of a user or an application (or more generally an LDAP client) against the directory
        server (or attaining anonymous access respectively), certain LDAP operations will be granted or rejected,
        according to configuration and certain rules. This process of granting access is called authorization.</para>
      <para>
        Authorization for directory operations is not strictly standardized in the LDAP world,
        <link
          xlink:href="http://www.faqs.org/rfcs/rfc2829.html">RFC 2829</link>
        describes
        various scenarios and concepts, but does not enforce a concrete implementation. Thus each product comes
        with its
        own authorization feature. So does ApacheDS. A powerful authorization subsystem is provided since
        version 0.9.3,
        but disabled as a default.
      </para>
      <section
        id="Authorization for directory operations vs. group membership">
        <title>Authorization for directory operations vs. group membership</title>
        <para>
          In order to accomplish their authorization functionality, software components often take advantage of LDAP
          groups stored within the directory.
          <emphasis>groupOfNames</emphasis>
          and
          <emphasis>groupOfUniqueNames</emphasis>
          are common object classes for groups
          entries; they contain the DNs of their members (users, other groups) as
          attribute values.
        </para>
        <para>In order to illustrate this, the "Seven Seas" example partition contains such group entries below
          "ou=groups,o=sevenSeas". Here the entry of a group describing the HMS Bounty crew (before the mutiny) in LDIF
          format.</para>
        <programlisting><![CDATA[
dn: cn=HMS Bounty,ou=crews,ou=groups,o=sevenSeas
objectclass: groupOfUniqueNames
objectclass: top
cn: HMS Bounty
uniquemember: cn=William Bligh,ou=people,o=sevenSeas
uniquemember: cn=Fletcher Christian,ou=people,o=sevenSeas
uniquemember: cn=John Fryer,ou=people,o=sevenSeas
...
          ]]></programlisting>
        <para>
          In such a scenario, a user, who is directly or indirectly member of a certain group is permitted to do
          something. The software component acts as a normal LDAP client and determines group belonging with the help of
          ordinary search operations. This is widely used but has nothing to do with the authorization for directory
          operations as described in this section (except that the client needs the permission to search the data).
          Learn more about best practices in this area in the article
          <link
            xlink:href="http://middleware.internet2.edu/dir/groups/docs/internet2-mace-dir-groups-best-practices-200210.htm">Practices in Directory Groups</link>
          . Further examples in
          this guide are the Tomcat and Apache HTTPD integration sections.
        </para>
      </section>
    </section>
    <section
      id="Default authorization behavior for directory operations">
      <title>Default authorization behavior for directory operations</title>
      <para>Without access controls enabled all entries are accessible and alterable by all: even anonymous users. There
        are however some minimal built-in rules for protecting users and groups within the server without having to turn
        on the ACI subsystem.</para>
      <section
        id="Sample data within 'ou=users,ou=system'">
        <title>Sample data within "ou=users,ou=system"</title>
        <para>
          In addition to our brave sailors below
          <emphasis>ou=people,o=sevenSeas</emphasis>
          , assume the following to entries present within
          <emphasis>ou=users,ou=system</emphasis>
          :
        </para>
        <figure
          id="Authorization sample entire figure">
          <title>Authorization sample entire</title>
          <mediaobject>
            <imageobject>
              <imagedata
                fileref="images/authorization_sample_entries.png" />
            </imageobject>
          </mediaobject>
        </figure>
        <programlisting><![CDATA[
dn: cn=Tori Amos,ou=users,ou=system
objectclass: person
objectclass: top
sn: Amos
cn: Tori Amos
userpassword: amos

dn: cn=Kate Bush,ou=users,ou=system
objectclass: person
objectclass: top
sn: Bush
cn: Kate Bush
userpassword: bush
        ]]></programlisting>
        <para>
          They are used in the following examples, in conjunction with
          <emphasis>o=sevenSeas</emphasis>
          , to describe the default authorization rules.
        </para>
      </section>
      <section
        id="Rules and sample operations">
        <title>Rules and sample operations</title>
        <para>Without ACIs the server automatically protects, hides, the admin user from everyone but the admin user.
          Here a sample search operation in order to demonstrate this protection. The same command is submitted three
          times with different users.</para>
        <screen><![CDATA[
$ ldapsearch -h zanzibar -p 10389 -D "uid=admin,ou=system" -w secret \\
    -b "ou=system" -s one "(uid=admin)" dn
version: 1
dn: uid=admin,ou=system

$ ldapsearch -h zanzibar -p 10389 -D "cn=William Bush,ou=people,o=sevenSeas" -w pass \\
    -b "ou=system" -s one "(uid=admin)" dn

$ ldapsearch -h zanzibar -p 10389 -D "cn=Tori Amos,ou=users,ou=system" -w amos \\
    -b "ou=system" -s one "(uid=admin)" dn

$
        ]]></screen>
        <para>Users cannot see other user entries under the 'ou=users,ou=system' entry. So placing new users there
          automatically protects them. Placing new users anywhere else exposes them.</para>
        <screen><![CDATA[
$ ldapsearch -h zanzibar -p 10389 -D "uid=admin,ou=system" -w secret \\
    -b "ou=users,ou=system" -s one "(objectclass=*)" dn
version: 1
dn: cn=Tori Amos,ou=users,ou=system

dn: cn=Kate Bush,ou=users,ou=system

$ ldapsearch -h zanzibar -p 10389 -D "cn=Kate Bush,ou=users,ou=system" -w bush \\
    -b "ou=users,ou=system" -s one "(objectclass=*)" dn
version: 1
dn: cn=Kate Bush,ou=users,ou=system

$ ldapsearch -h zanzibar -p 10389 -D "cn=William Bush,ou=people,o=sevenSeas" -w pass \\
    -b "ou=users,ou=system" -s one "(objectclass=*)" dn

$ ldapsearch -h zanzibar -p 10389 -D "cn=William Bush,ou=people,o=sevenSeas" -w pass \\
    -b "ou=people,o=sevenSeas" -s one "(objectclass=*)" dn
version: 1
dn: cn=Horatio Hornblower,ou=people,o=sevenSeas

dn: cn=William Bush,ou=people,o=sevenSeas

dn: cn=Thomas Masterman Hardy,ou=people,o=sevenSeas

dn: cn=Cornelius Buckley,ou=people,o=sevenSeas

dn: cn=William Bligh,ou=people,o=sevenSeas
...
$
        ]]></screen>
        <para>
          Groups defined using
          <emphasis>groupOfNames</emphasis>
          or
          <emphasis>groupOfUniqueNames</emphasis>
          under the 'ou=groups,ou=system' are also protected from access or alteration by anyone other than the admin
          user. Again this protection is not allowed anywhere else but under these entries.
        </para>
      </section>
      <section
        id="Is this sufficient?">
        <title>Is this sufficient?</title>
        <para>For simple configurations the described rules should provide adequate protection but it lacks flexibility.
          For advanced configurations users should enable the ACI subsystem. This however shuts down access to
          everything by everyone except the admin user which bypasses the ACI subsystem. Directory administrators should
          look at the documentation on how to specify access control information in the Advanced User's Guide.</para>
      </section>
    </section>
    <section
      id="Simple example for the ACI subsystem">
      <title>Simple example for the ACI subsystem</title>
      <para>As an appetizer for the stunning ACI subsystem (ACI = access control item) within ApacheDS, we provide a
        simple yet realistic example. It manifests the following requirements</para>
      <section
        id="Requirements met">
        <title>Requirements met</title>
        <orderedlist>
          <listitem>
            <para>Suffix "o=sevenSeas" used as Access Control Specific Area</para>
          </listitem>
          <listitem>
            <para>User "cn=Horatio Nelson,ou=people,o=sevenSeas" should be able to perform all operations (delete, add,
              ...) below the base "o=sevenSeas"</para>
          </listitem>
          <listitem>
            <para>Other users and anonymous users should only be able to search and compare (no add, modify etc.)</para>
          </listitem>
          <listitem>
            <para>Other users and anonymous users should not be able to read the userPassword attribute</para>
          </listitem>
        </orderedlist>
      </section>
      <section
        id="Enable the ACI Subsystem">
        <title>Enable the ACI Subsystem</title>
        <para>
          The authorization (ACI) subsystem is disabled by default. If you use the server standalone configured with
          a
          <emphasis>server.xml</emphasis>
          file, you can enable it by changing the value for property
          <emphasis>accessControlEnabled</emphasis>
          in the Spring
          bean definition for bean
          <emphasis>defaultDirectoryService</emphasis>
          , as depicted in the following fragment:
        </para>
        <programlisting><![CDATA[
<defaultDirectoryService id="directoryService" instanceId="default"
                           ...
                           accessControlEnabled="true"
                           ...>
        ]]></programlisting>
        <para>A restart of the server is necessary for this change to take effect.</para>
      </section>
      <section
        id="Further configuration tasks to perform afterwards">
        <title>Further configuration tasks to perform afterwards</title>
        <orderedlist>
          <listitem>
            <para>
              Create an operational attribute
              <emphasis>administrativeRole</emphasis>
              with value "accessControlSpecificArea" in the entry "o=sevenSeas".
            </para>
          </listitem>
          <listitem>
            <para>Create a subentry subordinate to "o=sevenSeas" to grant all operations' permissions to "cn=Horatio
              Nelson,ou=people,o=sevenSeas", who acts as directory manager</para>
            <para>The subentry should contain the following attributes and values:</para>
            <programlisting><![CDATA[
cn="sevenSeasAuthorizationRequirementsACISubentry"
subtreeSpecification="{}"
prescriptiveACI="{
                   identificationTag "directoryManagerFullAccessACI",
                   precedence 11,
                   authenticationLevel simple,
                   itemOrUserFirst userFirst:
                   {
                     userClasses
                     {
                       name { "cn=Horatio Nelson,ou=people,o=sevenSeas" }
                     },
                     userPermissions
                     { 
                       {
                         protectedItems
                         {
                           entry, allUserAttributeTypesAndValues
                         },
                         grantsAndDenials
                         {
                           grantAdd, grantDiscloseOnError, grantRead,
                           grantRemove, grantBrowse, grantExport, grantImport,
                           grantModify, grantRename, grantReturnDN,
                           grantCompare, grantFilterMatch, grantInvoke
                         } 
                       }
                     }
                   } 
                 }"
        ]]></programlisting>
          </listitem>
          <listitem>
            <para>A new attribute value should added to the previously created Subentry's prescriptiveACI attribute to
              grant search and compare permissions to all users.</para>
            <para>The new value:</para>
            <programlisting><![CDATA[
prescriptiveACI="{
                   identificationTag "allUsersSearchAndCompareACI",
                   precedence 10,
                   authenticationLevel simple,
                   itemOrUserFirst userFirst:
                   {
                     userClasses
                     {
                       allUsers
                     },
                     userPermissions
                     { 
                       {
                         protectedItems
                         {
                           entry, allUserAttributeTypesAndValues
                         },
                         grantsAndDenials
                         {
                           grantRead, grantBrowse, grantReturnDN,
                           grantCompare, grantFilterMatch, grantDiscloseOnError 
                         } 
                       }
                     }
                   } 
                 }"
        ]]></programlisting>
          </listitem>
          <listitem>
            <para>
              A new attribute value should added to the previously created Subentry's prescriptiveACI attribute to deny
              search and compare permissions for
              <emphasis>userPassword</emphasis>
              attribute to all users.
            </para>
            <para>The new value:</para>
            <programlisting><![CDATA[
prescriptiveACI="{
                   identificationTag "preventAllUsersFromReadingUserPasswordAttributeACI",
                   precedence 10,
                   authenticationLevel simple,
                   itemOrUserFirst userFirst:
                   {
                     userClasses
                     {
                       allUsers
                     },
                     userPermissions
                     { 
                       {
                         protectedItems
                         {
                           attributeType { userPassword }
                         },
                         grantsAndDenials
                         {
                           denyRead, denyCompare, denyFilterMatch
                         } 
                       }
                     }
                   } 
                 }"

        ]]></programlisting>
          </listitem>
        </orderedlist>
        <para>The two values given in 3 and 4 can be combined in a single value as:</para>
        <programlisting><![CDATA[
prescriptiveACI="{
                   identificationTag "allUsersACI",
                   precedence 10,
                   authenticationLevel none,
                   itemOrUserFirst userFirst:
                   {
                     userClasses
                     {
                       allUsers
                     },
                     userPermissions
                     { 
                       {
                         protectedItems { entry, allUserAttributeTypesAndValues },
                         grantsAndDenials { grantRead, grantBrowse, grantReturnDN,
                                            grantCompare, grantFilterMatch, grantDiscloseOnError } 
                       },
                       {
                         protectedItems { attributeType { userPassword } },
                         grantsAndDenials { denyRead, denyCompare, denyFilterMatch }
                       }
                     }
                   } 
                 }"
        ]]></programlisting>
      </section>
      <section
        id="LDIF for this configuration">
        <title>LDIF for this configuration</title>
        <para>
          The following LDIF file (
          <link
            xlink:href="data/authz_sevenSeas.ldif">authz_sevenSeas.ldif</link>
          ) provides a set of changes made to directory entries in the
          "Seven Seas" data. In total it performs the steps
          described above.
        </para>
        <programlisting><![CDATA[
# File authz_sevenSeas.ldif
#
# Create an operational attribute "administrativeRole"
# with value "accessControlSpecificArea" in the entry "o=sevenSeas".
#
dn: o=sevenSeas
changetype: modify
add: administrativeRole
administrativeRole: accessControlSpecificArea

# Create a subentry subordinate to "o=sevenSeas" to grant all operations' permissions 
# to "cn=Horatio Nelson,ou=people,o=sevenSeas", to grant search and compare permissions
# to all users and to deny search and compare permissions for userPassword attribute to all users. 
#
dn: cn=sevenSeasAuthorizationRequirementsACISubentry,o=sevenSeas
changetype: add
objectclass: top
objectclass: subentry
objectclass: accessControlSubentry
cn: sevenSeasAuthorizationRequirementsACISubentry
subtreeSpecification: {}
prescriptiveACI: {
    identificationTag "directoryManagerFullAccessACI",
    precedence 11,
    authenticationLevel simple,
    itemOrUserFirst userFirst:
    {
      userClasses
      {
        name { "cn=Horatio Nelson,ou=people,o=sevenSeas" }
      },
      userPermissions
      { 
        {
          protectedItems
          {
            entry, allUserAttributeTypesAndValues
          },
          grantsAndDenials
          {
            grantAdd, grantDiscloseOnError, grantRead,
            grantRemove, grantBrowse, grantExport, grantImport,
            grantModify, grantRename, grantReturnDN,
            grantCompare, grantFilterMatch, grantInvoke
          } 
        }
      }
    } 
  }
prescriptiveACI: {
    identificationTag "allUsersACI",
    precedence 10,
    authenticationLevel none,
    itemOrUserFirst userFirst:
    {
      userClasses
      {
        allUsers
      },
      userPermissions
      { 
        {
          protectedItems { entry, allUserAttributeTypesAndValues },
          grantsAndDenials { grantRead, grantBrowse, grantReturnDN,
                             grantCompare, grantFilterMatch, grantDiscloseOnError } 
        },
        {
          protectedItems { attributeType { userPassword } },
          grantsAndDenials { denyRead, denyCompare, denyFilterMatch }
        }
      }
    }
  }
        ]]></programlisting>
        <para>To apply this configuration to the sample data partition, you can perform an ldapmodify with the LDIF as
          agrument:</para>
        <screen><![CDATA[
$ ldapmodify -h zanzibar -p 10389 -D "uid=admin,ou=system" -w secret -f authz_sevenSeas.ldif
modifying entry o=sevenSeas

adding new entry cn=sevenSeasAuthorizationRequirementsACISubentry,o=sevenSeas
$
        ]]></screen>
        <para>It is also possible to use graphical tools; some of them offer the feature to perform operations given in
          LDIF.</para>
      </section>
    </section>
    <section
      id="Verification, that it works">
      <title>Verification, that it works</title>
      <para>After successfully applying the changes to the sample partition, one may ask how to check whether it works.
        We therefore perform some operations with the help of command line tools. Some will be permitted, some will not
        (and cause an appropriate error message). It would also be able to check this with the help of graphical tools
        (you might like to do this instead). But it is easier to document the parameters used with the help command line
        arguments.</para>
      <section
        id="Performing some search operations in order to read data">
        <title>Performing some search operations in order to read data</title>
        <para>Bind as user "William Bush" and search for entries which match "(uid=hhornblo)". Expected behavior: We are
          able to read the attributes of entry "cn=Horatio Hornblower,ou=people,o=sevenSeas" (the only entry which
          matches the filter). The password attribute should not be visible. It works as desired: </para>
        <screen><![CDATA[
$ ldapsearch -h zanzibar -p 10389 -D "cn=William Bush,ou=people,o=sevenSeas" -w pass \\
    -b "o=sevenSeas" -s sub "(uid=hhornblo)"
version: 1
dn: cn=Horatio Hornblower,ou=people,o=sevenSeas
mail: hhornblo@royalnavy.mod.uk
objectclass: person
objectclass: organizationalPerson
objectclass: inetOrgPerson
objectclass: top
cn: Horatio Hornblower
uid: hhornblo
givenname: Horatio
description: Capt. Horatio Hornblower, R.N
sn: Hornblower
        ]]></screen>
        <para>
          In the described configuration, the user "Horatio Nelson" acts as a directory manager below "o=sevenSeas".
          Hence he should basically be allowed to do everything. He should even be able to see other users'
          <emphasis>userPassword</emphasis>
          values. In our case, the hash function SHA was applied to them:
        </para>
        <screen><![CDATA[
$ ldapsearch -h zanzibar -p 10389 -D "cn=Horatio Nelson,ou=people,o=sevenSeas" -w pass \\
    -b "o=sevenSeas" -s sub "(objectclass=person)
" uid userPassword
version: 1
dn: cn=Horatio Hornblower,ou=people,o=sevenSeas
userpassword: {SHA}nU4eI71bcnBGqeO0t9tXvY1u5oQ=
uid: hhornblo

dn: cn=William Bush,ou=people,o=sevenSeas
userpassword: {SHA}nU4eI71bcnBGqeO0t9tXvY1u5oQ=
uid: wbush

dn: cn=Thomas Quist,ou=people,o=sevenSeas
userpassword: {SHA}nU4eI71bcnBGqeO0t9tXvY1u5oQ=
uid: tquist
...
        ]]></screen>
        <para>But "Horation Nelson" is not able to perform searches in other areas than "o=sevenSeas" to see the
          entries. Of course our global ApacheDS administrator "uid=admin,ou=system" is still able to see them:</para>
        <screen><![CDATA[
$ ldapsearch -h zanzibar -p 10389 -D "cn=Horatio Nelson,ou=people,o=sevenSeas" -w pass \\
    -b "ou=system" -s sub "(objectclass=person)"

$ ldapsearch -h zanzibar -p 10389 -D "uid=admin,ou=system" -w secret \\
    -b "ou=system" -s sub "(objectclass=person)"
version: 1
dn: uid=admin,ou=system
sn: administrator
cn: system administrator
objectClass: top
objectClass: person
objectClass: organizationalPerson
objectClass: inetOrgPerson
userpassword: secret
uid: admin
displayName: Directory Superuser

dn: cn=Tori Amos,ou=users,ou=system
cn: Tori Amos
userpassword: amos
objectclass: person
objectclass: top
sn: Amos
...
        ]]></screen>
      </section>
      <section
        id="Trying to manipulate data">
        <title>Trying to manipulate data</title>
        <para>Until now the authorization only hided data (entries, attributes) from users with insufficient access
          rights. Let's perform some operations which try to manipulate the directory data!</para>
        <section
          id="Adding an entry">
          <title>Adding an entry</title>
          <para>
            First we try to add a new user to the "Seven Seas" partition. The data for the entry is inspired by "Peter
            Pan" and provided by this LDIF file (
            <link
              xlink:href="data/captain_hook.ldif">captain_hook.ldif</link>
            ):
          </para>
          <programlisting><![CDATA[
# File captain_hook.ldif
dn: cn=James Hook,ou=people,o=sevenSeas
objectclass: inetOrgPerson
objectclass: organizationalPerson
objectclass: person
objectclass: top
cn: James Hook
description: A pirate captain and Peter Pan's nemesis
sn: Hook
mail: jhook@neverland
userpassword: peterPan
        ]]></programlisting>
          <para>An anonymous user is not allowed to create new entries, as the following error message shows:</para>
          <screen><![CDATA[
$ ldapmodify -h zanzibar -p 10389 -a -f captain_hook.ldif
adding new entry cn=James Hook,ou=people,o=sevenSeas
ldap_add: Insufficient access
ldap_add: additional info: failed to add entry cn=James Hook,ou=people,o=sevenSeas: null
$
        ]]></screen>
          <para>The same holds true for all "Seven Seas"-user other than "Horatio Nelson". The latter is permitted to do
            so:</para>
          <screen><![CDATA[
$ ldapmodify -h zanzibar -p 10389 -D "cn=William Bush,ou=people,o=sevenSeas" -w pass \\
    -a -f captain_hook.ldif
adding new entry cn=James Hook,ou=people,o=sevenSeas
ldap_add: Insufficient access
ldap_add: additional info: failed to add entry cn=James Hook,ou=people,o=sevenSeas: null

$ ldapmodify -h zanzibar -p 10389 -D "cn=Horatio Nelson,ou=people,o=sevenSeas" -w pass \\
    -a -f captain_hook.ldif
adding new entry cn=James Hook,ou=people,o=sevenSeas
$
        ]]></screen>
          <para>
            Afterwards a new entry is successfully created within the "Seven Seas" partition by user "Horatio Nelson".
            The '+' sign in the attributes list of the
            <emphasis>ldapsearch</emphasis>
            command causes ApacheDS to return the operational attributes, which demonstrate this.
          </para>
          <screen><![CDATA[
$ ldapsearch -h zanzibar -p 10389 -b "o=sevenSeas" -s sub "(cn=James Hook)" +
version: 1
dn: cn=James Hook,ou=people,o=sevenSeas
accessControlSubentries: cn=sevenSeasAuthorizationRequirementsACISubentry,o=sevenSeas
creatorsName: cn=Horatio Nelson,ou=people,o=sevenSeas
createTimestamp: 20061203140109Z
        ]]></screen>
        </section>
        <section
          id="Modifying an entry">
          <title>Modifying an entry</title>
          <para>
            As a further example which tries to write to the directory, we add a new value to the description attribute
            of the freshly created entry for Captain Hook. With a change entry in an LDIF file, it looks like this (file
            <link
              xlink:href="data/captain_hook_modify.ldif">captain_hook_modify.ldif</link>
            ):
          </para>
          <programlisting><![CDATA[
# File captain_hook_modify.ldif
dn: cn=James Hook,ou=people,o=sevenSeas
changetype: modify
add: description
description: Wears an iron hook in place of his right hand
-
        ]]></programlisting>
          <para>
            Performing the modification with the
            <emphasis>ldapmodify</emphasis>
            command line tool again fails for users other than "Horation Nelson" (who is allowed to due to the
            authorization configuration) and "uid=admin,ou=system".
          </para>
          <screen><![CDATA[
$ ldapmodify -h zanzibar -p 10389 -f captain_hook_modify.ldif
modifying entry cn=James Hook,ou=people,o=sevenSeas
ldap_modify: Insufficient access
ldap_modify: additional info: failed to modify entry cn=James Hook,ou=people,o=sevenSeas: null

$ ldapmodify -h zanzibar -p 10389 -D "cn=William Bush,ou=people,o=sevenSeas" -w pass \\ 
    -f captain_hook_modify.ldif
modifying entry cn=James Hook,ou=people,o=sevenSeas
ldap_modify: Insufficient access
ldap_modify: additional info: failed to modify entry cn=James Hook,ou=people,o=s
evenSeas: null

$ ldapmodify -h zanzibar -p 10389 -D "cn=Horatio Nelson,ou=people,o=sevenSeas" -w pass \\
    -f captain_hook_modify.ldif
modifying entry cn=James Hook,ou=people,o=sevenSeas
        ]]></screen>
        </section>
        <section
          id="Deleting an entry">
          <title>Deleting an entry</title>
          <para>
            Now it is finale time. A demonstration on how to delete the villain's entry from the directory. With an LDIF
            file (
            <link
              xlink:href="data/captain_hook_delete.ldif">captain_hook_delete.ldif</link>
            ) with an appropriate change entry, this can easily be accomplished, if the bind user is allowed to do so.
          </para>
          <programlisting><![CDATA[
# File captain_hook_delete.ldif
dn: cn=James Hook,ou=people,o=sevenSeas
changetype: delete
        ]]></programlisting>
          <para>
            Applying this file with the help of
            <emphasis>ldapmodify</emphasis>
            results in a behavior comparable to the modification. Anonymous or "normal" users (like "William Bush") are
            not permitted to delete Captain Hook's entry. The user "Horatio Nelson", our directory manager for "Seven
            Seas", is:
          </para>
          <screen><![CDATA[
$ ldapmodify -h zanzibar -p 10389 -f captain_hook_delete.ldif
deleting entry cn=James Hook,ou=people,o=sevenSeas
ldap_delete: Insufficient access
ldap_delete: additional info: failed to delete entry cn=James Hook,ou=people,o=sevenSeas: null

$ ldapmodify -h zanzibar -p 10389 -D "cn=William Bush,ou=people,o=sevenSeas" -w pass \\
    -f captain_hook_delete.ldif
deleting entry cn=James Hook,ou=people,o=sevenSeas
ldap_delete: Insufficient access
ldap_delete: additional info: failed to delete entry cn=James Hook,ou=people,o=sevenSeas: null

$ ldapmodify -h zanzibar -p 10389 -D "cn=Horatio Nelson,ou=people,o=sevenSeas" -w pass \\
    -f captain_hook_delete.ldif
deleting entry cn=James Hook,ou=people,o=sevenSeas
$
        ]]></screen>
          <para>The entry "cn=James Hook,ou=people,o=sevenSeas" has been successfully deleted from the partition. Our
            little demonstration on how the ACI subsystem with a realistic configuration behaves end here. Learn more
            about it in the Advanced User's Guide.</para>
        </section>
      </section>
    </section>
    <section
      id="Resources Basic Authorization">
      <title>Resources</title>
      <itemizedlist>
        <listitem>
          <para>
            <link
              xlink:href="http://middleware.internet2.edu/dir/groups/docs/internet2-mace-dir-groups-best-practices-200210.htm">Practices in Directory Groups</link>
            describes how to use groups within LDAP directories. Highly recommended.
          </para>
        </listitem>
        <listitem>
          <para>
            The
            <link
              xlink:href="http://cwiki.apache.org/confluence/pages/createpage.action?spaceKey=DIRxSRVx11&amp;title=ApacheDS%20v1.0%20Advanced%20User%27s%20Guide&amp;linkCreation=true&amp;fromPageId=55244">ApacheDS v1.0 Advanced User's Guide</link>
            provides a detailed authorization chapter
          </para>
        </listitem>
        <listitem>
          <para>
            <link
              xlink:href="http://www.faqs.org/rfcs/rfc2849.html">RFC 2849</link>
            The LDAP Data Interchange Format (LDIF) is used extensively in this section
          </para>
        </listitem>
      </itemizedlist>
    </section>
  </section>
  <section
    id="How to enable SSL">
    <title>How to enable SSL</title>
    <para>This section describes the transport layer security options for LDAP, and especially how to enable LDAPS on
      ApacheDS.</para>
    <itemizedlist>
      <listitem>
        <para>
          <xref
            linkend="Transport layer security and LDAP" />
        </para>
      </listitem>
      <listitem>
        <para>
          <xref
            linkend="Server configuration" />
        </para>
      </listitem>
      <listitem>
        <para>
          <xref
            linkend="Verification, Clients" />
        </para>
      </listitem>
      <listitem>
        <para>
          <xref
            linkend="Resources SSL" />
        </para>
      </listitem>
    </itemizedlist>
    <section
      id="Transport layer security and LDAP">
      <title>Transport layer security and LDAP</title>
      <para>
        Several requirements related to security can be easily accomplished with the help of
        <emphasis
          role="bold">SSL</emphasis>
        technology (Secure
        Socket Layer) or its standardized successor
        <emphasis
          role="bold">TLS</emphasis>
        (Transport Layer Security, RFC 2246). Among these are the
        protection of data against eavesdropping and
        modification, when on transit between client and server (data
        integrity), and the authentication of a server
        toward a client with the help of a certificate.
      </para>
      <para>
        There are two approaches to utilize these technologies in the LDAP world.
        <orderedlist>
          <listitem>
            <para>ldaps (LDAP over SSL/TLS, port 636)</para>
          </listitem>
          <listitem>
            <para>StartTLS (extended operation)</para>
          </listitem>
        </orderedlist>
      </para>
      <para>
        The first option is comparable to HTTPS and inserts an SSL/TLS layer between the TCP/IP protocol and LDAP.
        Establishing a connection like this is normally provided via a different server port (port 636 is common, it is
        a well-known port, like port 389 is for LDAP). In URIs the schema "ldaps" is specified (for instance
        <emphasis>ldaps://zanzibar:636/</emphasis>
        ) instead of "ldap". It is possible to write programs which switch between ldap and ldaps
        without changes in the
        source, if the connection data is configured external.
      </para>
      <para>In the second option a client establishes at first a "normal" LDAP connection. With a special request
        (extended operation StartTLS) it tries to switch to secure communication afterwards. It is not necessary to
        change the port for this, the communication continues on the established connection. The client may go back to
        the original connection state ("TLS Closure Alert"), in doing so protecting only selected parts of the
        communication.</para>
      <para>Both ways to utilize SSL/TLS within LDAP require the configuration of the server with an appropriate
        certificate.</para>
    </section>
    <section
      id="Server configuration">
      <title>Server configuration</title>
      <para>ApacheDS 1.5.5 supports both options and requires a JDK 1.5 or above. The feature is enabled by default, but
        you may need to configure it. There are some steps to follow in order to obtain a SSL enabled server.</para>
      <important>
        <para>In order to keep it simple for beginners, you don't need any certificate to get LDAPS working. The latest
          version generates its own self signed certificate. From the user point of view, it's just a matter of enabling
          the ldaps service to get it working.</para>
        <para>However, if one wants to use a signed certificate, another configuration is needed, where you tell the
          server about the keystore to use, and the certificate password to use.</para>
      </important>
      <section
        id="In case you want ADS to generate the certificate">
        <important>In case you want ADS to generate the certificate</important>
        <para>
          There is nothing to do but enabling SSL and specifying the port to use in the
          <emphasis>server.xml</emphasis>
          configuration file :
        </para>
        <programlisting><![CDATA[
...
  <ldapServer id="ldapServer"
            ...>
    <transports>
      ...
      <tcpTransport address="localhost" port="10636" enableSSL="true"/>
    </transports>
    ...
  </ldapServer>
  ...
        ]]></programlisting>
        <para>That's it, the server is LDAPS capable !</para>
        <important>
          <para>
            The default
            <emphasis>server.xml</emphasis>
            configuration file contains an typo, by default the port is set to 10686.
          </para>
        </important>
      </section>
      <section
        id="In case you want to use an external keystore">
        <title>In case you want to use an external keystore</title>
        <para>A certificate is a signed public key (signed normally by a third party, a certificate authority, CA).
        </para>
        <para>
          There are different options
          <itemizedlist>
            <listitem>
              <para>either you buy a certificate from a Certificate Authority (like Verisign, etc.), or you obtain one
                from your enterprise CA, if available</para>
            </listitem>
            <listitem>
              <para>
                or you ask for a free certificate from
                <link
                  xlink:href="http://www.cacert.org/">CACERT organisation</link>
              </para>
            </listitem>
            <listitem>
              <para>or you create your own certificate, self-signed or signed by your private CA, which will not be
                trusted.</para>
            </listitem>
          </itemizedlist>
        </para>
        <para>We will do it the last way (self-signed), primarily because it's easy and fast (you won't have to pay nor
          to wait to obtain your certificate)</para>
        <section
          id="Key creation">
          <title>Key creation</title>
          <para>First it is necessary to create a key pair (public/private key) for your server, zanzibar in our case.
            One option is to use the JDK tool keytool for this task. In the following example, we use these options
          </para>
          <table
            id="Key creation table">
            <title>SSL Key creation</title>
            <tgroup
              cols="3">
              <thead>
                <row>
                  <entry>Option</entry>
                  <entry>value</entry>
                  <entry>Description</entry>
                </row>
              </thead>
              <tbody>
                <row>
                  <entry>-genkey</entry>
                  <entry></entry>
                  <entry>command to generate a key pair</entry>
                </row>
                <row>
                  <entry>-keyalg</entry>
                  <entry>"RSA"</entry>
                  <entry>algorithm to be used to generate the key pair, in our case, default is "DSA"</entry>
                </row>
                <row>
                  <entry>-dname</entry>
                  <entry>"cn=zanzibar, ou=ApacheDS, o=ASF, c=US"</entry>
                  <entry>the X.500 Distinguished Name to be associated with alias, used as the issuer and subject fields
                    in the self-signed certificate</entry>
                </row>
                <row>
                  <entry>-alias</entry>
                  <entry>zanzibar</entry>
                  <entry>name to refer the entry within the keystore</entry>
                </row>
                <row>
                  <entry>-keystore</entry>
                  <entry>zanzibar.ks </entry>
                  <entry>keystore file location</entry>
                </row>
                <row>
                  <entry>-storepass</entry>
                  <entry>secret</entry>
                  <entry>password used to protect the integrity of the keystore</entry>
                </row>
                <row>
                  <entry>-validity</entry>
                  <entry>730</entry>
                  <entry>number of days for which the certificate should be considered valid, default is 90</entry>
                </row>
              </tbody>
            </tgroup>
          </table>
          <para>
            Learn more about keytool at the
            <link
              xlink:href="http://java.sun.com/j2se/1.5.0/docs/tooldocs/solaris/keytool.html">manpage</link>
            .
          </para>
          <screen><![CDATA[
$ keytool -genkey -keyalg "RSA" -dname "cn=zanzibar, ou=ApacheDS, o=ASF, c=US" \\
    -alias zanzibar -keystore zanzibar.ks -storepass secret -validity 730
Enter key password for <zanzibar>
        (RETURN if same as keystore password):
$ ls -l
total 4
-rw-r--r--   1 stefan   users       1275 Jun 10 20:42 zanzibar.ks
$ keytool -list -keystore zanzibar.ks
Enter keystore password:  secret

Keystore type: jks
Keystore provider: SUN

Your keystore contains 1 entry

zanzibar, Jun 10, 2007, keyEntry,
Certificate fingerprint (MD5): 95:4A:90:3D:69:09:64:84:C7:21:FD:F7:B8:82:11:8C
$
          ]]></screen>
          <para>
            Another option is to use graphical tools for key creation like
            <link
              xlink:href="http://portecle.sourceforge.net/">Portecle</link>
            , which is basically a user-friendly front-end for keytool with comparable functionality. For a first
            impression see a screen shot below.
          </para>
          <mediaobject>
            <imageobject>
              <imagedata
                fileref="images/portecle_with_keystore.png" />
            </imageobject>
          </mediaobject>
        </section>
        <section
          id="Configuring ApacheDS to use this external keystore">
          <title>Configuring ApacheDS to use this external keystore</title>
          <para>
            Enabling SSL in Apache Directory Server and using the key pair created as above is quite easy. Simply
            put the
            keystore file in the
            <emphasis>conf</emphasis>
            directory of ApacheDS, and enable ldaps. Here is the fragment from
            <emphasis>server.xml</emphasis>
            on how to do so.
          </para>
          <programlisting><![CDATA[
...
  <ldapServer id="ldapServer"
           ...
           keystoreFile="C:/java/apacheds-1.5.5/conf/zanzibar.ks"
           certificatePassword="secret">
    <transports>
      ...
      <tcpTransport address="localhost" port="10636" enableSSL="true"/>
    </transports>
    ...
  </ldapServer>
  ...
          ]]></programlisting>
          <para>The following properties were used</para>
          <table
            id="External Keystore Properties table">
            <title>External Keystore Properties</title>
            <tgroup
              cols="3">
              <thead>
                <row>
                  <entry>Property</entry>
                  <entry>default value</entry>
                  <entry>Description</entry>
                </row>
              </thead>
              <tbody>
                <row>
                  <entry>keystoreFile</entry>
                  <entry>none</entry>
                  <entry>path of the X509 (or JKS) certificate file for LDAPS</entry>
                </row>
                <row>
                  <entry>certificatePassword</entry>
                  <entry>changeit</entry>
                  <entry>password which is used to load the LDAPS certificate file</entry>
                </row>
                <row>
                  <entry>port</entry>
                  <entry>10636</entry>
                  <entry>LDAPS TCP/IP port number to listen to</entry>
                </row>
                <row>
                  <entry>enableSSL</entry>
                  <entry>true</entry>
                  <entry>sets if SSL is enabled or not</entry>
                </row>
              </tbody>
            </tgroup>
          </table>
          <para>
            After modification of the
            <emphasis>server.xml</emphasis>
            , the server has to be restarted in order to take effect.
          </para>
        </section>
      </section>
    </section>
    <section
      id="Verification, Clients">
      <title>Verification, Clients</title>
      <para>After restarting the server, you should have a server offering both ldap and ldaps. How to verify whether it
        works?</para>
      <section
        id="Using Apache Directory Studio to connect">
        <title>Using Apache Directory Studio to connect</title>
        <para>Apache Directory Studio happily supports ldaps connections. Enter the connection data (hostname and port)
          and select "Use SSL encryption" from the dropdown, if you create or modify a connection:</para>
        <figure
          id="Studio SSL figure">
          <title>Studio SSL</title>
          <mediaobject>
            <imageobject>
              <imagedata
                fileref="images/studio_ssl.png" />
            </imageobject>
          </mediaobject>
        </figure>
        <para>Afterwards the connection behaves like LDAP does. No difference in functionality, but the transmission is
          secured by SSL.</para>
        <para>Because our self-signed certificate is not trustworthy, many tools will present a warning (as Studio does
          in version 1.5.0). You will likely be able to view the certificate, and decide to continue (accepting the
          certificate always or this session only), like with web browsers.</para>
      </section>
      <section
        id="Other clients, Java programs using JNDI">
        <title>Other clients, Java programs using JNDI</title>
        <para>If you use other graphical clients, the behavior will be comparable. Sometimes clients don't allow to
          connect to a server, if the certificate is not trustworthy. This is for instance the case for Java clients
          using JNDI.</para>
        <para>
          The following simple Java program tries to connect via JNDI/JSSE (Java Secure Socket Extension) and LDAPS to
          <emphasis>ldaps://zanzibar:10636</emphasis>
        </para>
        <programlisting><![CDATA[
import java.util.Hashtable;
import javax.naming.*;
import javax.naming.directory.*;

public class ConnectWithLdaps {

    public static void main(String[] args) throws NamingException {

        Hashtable env = new Hashtable();

        // Simple bind
        env.put(Context.SECURITY_AUTHENTICATION, "simple");
        env.put(Context.SECURITY_PRINCIPAL,
                "cn=Horatio Hornblower,ou=people,o=sevenSeas");
        env.put(Context.SECURITY_CREDENTIALS, "pass");

        env.put(Context.INITIAL_CONTEXT_FACTORY,
                "com.sun.jndi.ldap.LdapCtxFactory");
        env.put(Context.PROVIDER_URL, "ldaps://zanzibar:636/o=sevenSeas");

        DirContext ctx = new InitialDirContext(env);
        NamingEnumeration enm = ctx.list("");
        while (enm.hasMore()) {
            System.out.println(enm.next());
        }
        ctx.close();
    }
}
]]></programlisting>
        <para>
          It causes a
          <emphasis>CommunicationException</emphasis>
          , if the certificate is not trusted:
        </para>
        <screen><![CDATA[
$ java ConnectWithLdaps
Exception in thread "main" javax.naming.CommunicationException: 
  simple bind failed: zanzibar:636 
      [Root exception is javax.net.ssl.SSLHandshakeException: 
       sun.security.validator.ValidatorException: PKIX path building failed:    
       sun.security.provider.certpath.SunCertPathBuilderException: 
       unable to find valid certification path to requested target]
at com.sun.jndi.ldap.LdapClient.authenticate(Unknown Source)
...
]]></screen>
        <para>In order to make the client trust our server, one option is to share a self signed certificate.
          So we
          export the certificate (DER format) using keytool like this:</para>
        <screen><![CDATA[
$ keytool -export -keystore zanzibar.ks -alias zanzibar -file zanzibar.cer
Enter keystore password:  secret
Certificate stored in file <zanzibar.cer>
$ ls -l
total 6
-rw-r--r--   1 stefan   users        504 Jun 10 21:51 zanzibar.cer
-rw-r--r--   1 stefan   users       1275 Jun 10 20:42 zanzibar.ks
$ 
]]></screen>
        <para>
          Please note that you don't want to share the server keystore file itself with arbitrary clients, because
          it
          holds the private key. Instead we create a separate keystore
          <emphasis>trusted.ks</emphasis>
          with the help of
          <emphasis>keytool</emphasis>
          . We import
          the certificate
          <emphasis>zanzibar.cer</emphasis>
          like this:
        </para>
        <screen><![CDATA[
$ keytool -import -file zanzibar.cer -alias zanzibar -keystore trusted.ks -storepass secret
Owner: CN=zanzibar, OU=ApacheDS, O=ASF, C=US
Issuer: CN=zanzibar, OU=ApacheDS, O=ASF, C=US
Serial number: 466c4611
Valid from: Sun Jun 10 20:42:25 CEST 2007 until: Tue Jun 09 20:42:25 CEST 2009
Certificate fingerprints:
         MD5:  95:4A:90:3D:69:09:64:84:C7:21:FD:F7:B8:82:11:8C
         SHA1: C5:63:E0:DA:BB:C8:0E:E8:27:D0:91:1D:28:DD:11:BB:93:21:13:C9
Trust this certificate? [no]:  yes
Certificate was added to keystore
$ keytool -list -keystore trusted.ks -storepass secret                
Keystore type: jks
Keystore provider: SUN

Your keystore contains 1 entry

zanzibar, Jun 11, 2007, trustedCertEntry,
Certificate fingerprint (MD5): 95:4A:90:3D:69:09:64:84:C7:21:FD:F7:B8:82:11:8C
$
]]></screen>
        <para>Instead of using the command line version of keytool, it is also possible to perform the certificate
          export and import operations with Portecle or any other graphical frontend. This is for instance how the
          trusted.ks files with the imported certificate looks like in Portecle.</para>
        <figure
          id="Portecle with Certificate figure">
          <title>Portecle with Certificate</title>
          <mediaobject>
            <imageobject>
              <imagedata
                fileref="images/portecle_with_certificate.png" />
            </imageobject>
          </mediaobject>
        </figure>
        <para>
          Clients may use this keystore in order to connect to the server. Therefore they can configure
          <emphasis>trusted.ks</emphasis>
          as the trusted store via the environment like this:
        </para>
        <screen><![CDATA[
$ java -Djavax.net.ssl.trustStore=trusted.ks ConnectWithLdaps
ou=people: javax.naming.directory.DirContext
ou=groups: javax.naming.directory.DirContext 
]]></screen>
        <para>Another option would be to import the certificate in the default keystore of the JRE installation (within
          $JAVA_HOME/jre/lib/security). For a test certificate this proceeding is not appropriate.</para>
        <section
          id="Troubleshooting">
          <title>Troubleshooting</title>
          <para>
            In practice connection establishment with LDAP over SSL may lead to various problems. In order to
            eliminate
            the errors it is helpful to see communication-specific debug information. The system property
            <emphasis>javax.net.debug</emphasis>
            is available for this task. The value "ssl" provides information about the certificates in
            the used key
            store, the server certificate, and the steps during establishing of the SSL connection
            (handshake):
          </para>
          <screen><![CDATA[
$ java -Djavax.net.ssl.trustStore=trusted.ks -Djavax.net.debug=ssl ConnectWithLdaps
setting up default SSLSocketFactory
use default SunJSSE impl class: com.sun.net.ssl.internal.ssl.SSLSocketFactoryImpl
class com.sun.net.ssl.internal.ssl.SSLSocketFactoryImpl is loaded
keyStore is : 
keyStore type is : jks
keyStore provider is : 
init keystore
init keymanager of type SunX509
trustStore is: trusted.ks
trustStore type is : jks
trustStore provider is : 
init truststore
adding as trusted cert:
  Subject: CN=zanzibar, OU=ApacheDS, O=ASF, C=US
  Issuer:  CN=zanzibar, OU=ApacheDS, O=ASF, C=US
  Algorithm: RSA; Serial number: 0x466c4611
  Valid from Sun Jun 10 20:42:25 CEST 2007 until Tue Jun 09 20:42:25 CEST 2009

init context
trigger seeding of SecureRandom
done seeding SecureRandom
instantiated an instance of class com.sun.net.ssl.internal.ssl.SSLSocketFactoryImpl
%% No cached client session
*** ClientHello, TLSv1
...
]]></screen>
          <para>You should be able to determine any SSL-related configuration problem with the help of this log.</para>
        </section>
      </section>
    </section>
    <section
      id="Resources SSL">
      <title>Resources</title>
      <itemizedlist>
        <listitem>
          <para>
            <link
              xlink:href="http://java.sun.com/products/jsse/">Java Secure Socket Extension (JSSE)</link>
          </para>
        </listitem>
        <listitem>
          <para>
            <link
              xlink:href="http://portecle.sourceforge.net/">Portecle</link>
            a free UI application for creating, managing and examining keystores
          </para>
        </listitem>
        <listitem>
          <para>
            <link
              xlink:href="http://wp.netscape.com/eng/ssl3/">SSL 3.0 Specification (Netscape)</link>
          </para>
        </listitem>
      </itemizedlist>
    </section>
  </section>
</chapter>
