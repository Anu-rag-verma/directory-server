/*
 *   Copyright 2004 The Apache Software Foundation
 *
 *   Licensed under the Apache License, Version 2.0 (the "License");
 *   you may not use this file except in compliance with the License.
 *   You may obtain a copy of the License at
 *
 *       http://www.apache.org/licenses/LICENSE-2.0
 *
 *   Unless required by applicable law or agreed to in writing, software
 *   distributed under the License is distributed on an "AS IS" BASIS,
 *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *   See the License for the specific language governing permissions and
 *   limitations under the License.
 *
 */
package $package;


import java.util.ArrayList;
import javax.naming.NamingException;

import org.apache.ldap.common.schema.*;

#if ( $package != "org.apache.eve.schema.bootstrap" )
import org.apache.eve.schema.bootstrap.*;
#end

/**
 * A producer of schema attributeType definations for the $schema schema.  This
 * code has been automatically generated using schema files in the OpenLDAP
 * format along with the eve schema plugin for maven.  This has been done
 * to facilitate Eve<->OpenLDAP schema interoperability.
 *
 * @author <a href="mailto:directory-dev@incubator.apache.org">Apache Directory Project</a>
 * @version $Rev$
 */
public class $classname extends AbstractBootstrapProducer
{
    /** a reused empty String array */
    private static final String[] EMPTY = new String[0];

    public $classname()
    {
        super( ProducerTypeEnum.ATTRIBUTE_TYPE_PRODUCER );
    }


    // ------------------------------------------------------------------------
    // BootstrapProducer Methods
    // ------------------------------------------------------------------------


    /**
     * @see BootstrapProducer#produce(BootstrapRegistries, ProducerCallback)
     */
    public void produce( BootstrapRegistries registries, ProducerCallback cb )
        throws NamingException
    {
        ArrayList names = new ArrayList();
        BootstrapAttributeType attributeType;

        #foreach ( $attrType in $attrTypes )

        // --------------------------------------------------------------------
        // AttributeType $attrType.getOid() $!attrType.getName()
        // --------------------------------------------------------------------

        attributeType = new BootstrapAttributeType( "$attrType.getOid()", registries );
        attributeType.setSingleValue( $attrType.isSingleValue() );
        attributeType.setCollective( $attrType.isCollective() );
        attributeType.setObsolete( $attrType.isObsolete() );
        attributeType.setCanUserModify( $attrType.isNoUserModification() );
        attributeType.setLength( $attrType.getLength() );
        attributeType.setUsage( UsageEnum.getUsage( "$attrType.getUsage().getName()" ) );
#if ( $attrType.getSuperiorOid() )        attributeType.setSuperiorId( "$attrType.getSuperiorOid()" ); #end
#if ( $attrType.getEqualityOid() )        attributeType.setEqualityId( "$attrType.getEqualityOid()" );#end
#if ( $attrType.getSubstrOid() )        attributeType.setSubstrId( "$attrType.getSubstrOid()" );#end
#if ( $attrType.getOrderingOid() )        attributeType.setOrderingId( "$attrType.getOrderingOid()" );#end
#if ( $attrType.getSyntaxOid() )        attributeType.setSyntaxId( "$attrType.getSyntaxOid()" );#end

        #if ( $attrType.getNames() )
names.clear();
       #foreach ( $name in $attrType.getNames() ) names.add( "$name" );
       #end
 attributeType.setNames( ( String[] ) names.toArray( EMPTY ) );
        #else
 attributeType.setNames( EMPTY );
        #end
cb.schemaObjectProduced( this, "$attrType.getOid()", attributeType );

 #end   }
}
