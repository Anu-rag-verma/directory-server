/*
 *   Copyright 2004 The Apache Software Foundation
 *
 *   Licensed under the Apache License, Version 2.0 (the "License");
 *   you may not use this file except in compliance with the License.
 *   You may obtain a copy of the License at
 *
 *       http://www.apache.org/licenses/LICENSE-2.0
 *
 *   Unless required by applicable law or agreed to in writing, software
 *   distributed under the License is distributed on an "AS IS" BASIS,
 *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *   See the License for the specific language governing permissions and
 *   limitations under the License.
 *
 */
package $package;


import java.util.ArrayList;
import javax.naming.NamingException;

import org.apache.ldap.common.schema.*;

#if ( $package != "org.apache.eve.schema" )
import org.apache.eve.schema.*;
#end
#if ( $package != "org.apache.eve.schema.config" )
import org.apache.eve.schema.config.*;
#end


/**
 * A configuration set of schema attributeType definations for the $schema
 * schema.  This code has been automatically generated from velocity templates
 * and the OpenLDAP syntax specified $schema.schema file.  This has been done
 * to facilitate Eve<->OpenLDAP schema interoperability.
 *
 * @author <a href="mailto:directory-dev@incubator.apache.org">Apache Directory Project</a>
 * @version \$Rev\$
 */
public class $classname implements AttributeTypeConfigSet
{
    /** the DN of the owner of the objects within this SyntaxConfigSet */
    private static final String OWNER = "$owner";
    /** the logical schema the objects within this SyntaxConfigSet belong to */
    private static final String SCHEMA = "$schema";


    private String[] schemaDeps;


    // ------------------------------------------------------------------------
    // Configuration Set Methods
    // ------------------------------------------------------------------------


    public String getOwner()
    {
        return OWNER;
    }


    public String getSchemaName()
    {
        return SCHEMA;
    }


    public String[] getDependentSchemas()
    {
        if ( schemaDeps == null )
        {
            schemaDeps = new String[$schemaDepCount];

            #foreach ( $dep in $schemaDeps )
            #set ( $ii = $velocityCount - 1 )
schemaDeps[$ii] = "$dep";
            #end

        }

        return schemaDeps;
    }


    // ------------------------------------------------------------------------
    // Syntax Configuration Set Methods
    // ------------------------------------------------------------------------


    public AttributeType[] load( SyntaxRegistry syntaxReg,
                                 MatchingRuleRegistry mruleReg,
                                 AttributeTypeRegistry attrTypeReg )
        throws NamingException
    {
        MutableAttributeType[] attributeTypes = new MutableAttributeType[$attrTypeCount];

        #foreach ( $attrType in $attrTypes )
        #set ( $ii = $velocityCount - 1 )

        // --------------------------------------------------------------------
        // AttributeType $attrType.getOid()
        // --------------------------------------------------------------------


        attributeTypes[$ii] = new MutableAttributeType( "$attrType.getOid()" );
        attributeTypes[$ii].setSingleValue( $attrType.isSingleValue() );
        attributeTypes[$ii].setCollective( $attrType.isCollective() );
        attributeTypes[$ii].setObsolete( $attrType.isObsolete() );
        attributeTypes[$ii].setCanUserModify( $attrType.isCanUserModify() );
        attributeTypes[$ii].setLength( $attrType.getLength() );
        attributeTypes[$ii].setUsage( UsageEnum.getUsage( "$attrType.getUsage().getName()" ) );
#if ( $attrType.getSuperiorOid() )        attributeTypes[$ii].setSuperior( attrTypeReg.lookup( "$attrType.getSuperiorOid()" ) ); #end
#if ( $attrType.getEqualityOid() )        attributeTypes[$ii].setEquality( mruleReg.lookup( "$attrType.getEqualityOid()" ) );#end
#if ( $attrType.getSubstrOid() )        attributeTypes[$ii].setSubstr( mruleReg.lookup( "$attrType.getSubstrOid()" ) );#end
#if ( $attrType.getOrderingOid() )        attributeTypes[$ii].setOrdering( mruleReg.lookup( "$attrType.getOrderingOid()" ) );#end
#if ( $attrType.getSyntaxOid() )        attributeTypes[$ii].setSyntax( syntaxReg.lookup( "$attrType.getSyntaxOid()" ) );#end

        #end

        return attributeTypes;
    }


    private static class MutableAttributeType extends BaseAttributeType
    {
        public MutableAttributeType( String oid )
        {
            super( oid );
        }

        protected void setSuperior( AttributeType superior )
        {
            super.setSuperior( superior );
        }

        protected void setNameList( ArrayList nameList )
        {
            super.setNameList( nameList );
        }

        protected void setEquality( MatchingRule equality )
        {
            super.setEquality( equality );
        }

        protected void setSubstr( MatchingRule substr )
        {
            super.setSubstr( substr );
        }

        protected void setOrdering( MatchingRule ordering )
        {
            super.setOrdering( ordering );
        }

        protected void setSyntax( Syntax syntax )
        {
            super.setSyntax( syntax );
        }

        protected void setSingleValue( boolean singleValue )
        {
            super.setSingleValue( singleValue );
        }

        protected void setCollective( boolean collective )
        {
            super.setCollective( collective );
        }

        protected void setCanUserModify( boolean canUserModify )
        {
            super.setCanUserModify( canUserModify );
        }

        protected void setObsolete( boolean obsolete )
        {
            super.setObsolete( obsolete );
        }

        protected void setUsage( UsageEnum usage )
        {
            super.setUsage( usage );
        }

        protected void setLength( int length )
        {
            super.setLength( length );
        }
    }
}
