/*
 *   Copyright 2004 The Apache Software Foundation
 *
 *   Licensed under the Apache License, Version 2.0 (the "License");
 *   you may not use this file except in compliance with the License.
 *   You may obtain a copy of the License at
 *
 *       http://www.apache.org/licenses/LICENSE-2.0
 *
 *   Unless required by applicable law or agreed to in writing, software
 *   distributed under the License is distributed on an "AS IS" BASIS,
 *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *   See the License for the specific language governing permissions and
 *   limitations under the License.
 *
 */
package $package;


import org.apache.ldap.common.schema.*;
//import org.apache.eve.schema.config.*;


/**
 * A configuration set of schema attributeType definations for the $schema
 * schema.  This code has been automatically generated from velocity templates
 * and the OpenLDAP syntax specified $schema.schema file.  This has been done
 * to facilitate Eve<->OpenLDAP schema interoperability.
 *
 * @author <a href="mailto:directory-dev@incubator.apache.org">Apache Directory Project</a>
 * @version \$Rev\$
 */
public class $classname implements AttributeTypeConfigSet
{
    /** the DN of the owner of the objects within this SyntaxConfigSet */
    private static final String OWNER = "$owner";
    /** the logical schema the objects within this SyntaxConfigSet belong to */
    private static final String SCHEMA = "$schema";


    private String[] schemaDeps;


    // ------------------------------------------------------------------------
    // Configuration Set Methods
    // ------------------------------------------------------------------------


    public String getOwner()
    {
        return OWNER;
    }


    public String getSchemaName()
    {
        return SCHEMA;
    }


    public String[] getDependentSchemas()
    {
        if ( schemaDeps == null )
        {
            schemaDeps = new String[$schemaDepCount];

            #foreach ( $dep in $schemaDeps )
            #set ( $ii = $velocityCount - 1 )
schemaDeps[$ii] = "$dep";
            #end

        }

        return schemaDeps;
    }


    // ------------------------------------------------------------------------
    // Syntax Configuration Set Methods
    // ------------------------------------------------------------------------


    public AttributeType[] load( AttributeTypeRegistry attrTypeReg,
                                 MatchingRuleRegistry mruleReg )
        throws NamingException
    {
        String usage;
        String mruleOid;
        String superiorOid;
        MatchingRule mrule;
        AttributeType superior;
        AttributeType[] attributeTypes = new AttributeType[$attrTypeCount];

        #foreach ( $attrType in $attrTypes )
        #set ( $ii = $velocityCount - 1 )
attributeTypes[$ii] = new MutableAttributeType( "$attrType.getOid()" );
        attributeTypes[$ii].setSingleValue( $attrType.isSingleValue() );
        attributeTypes[$ii].setCollective( $attrType.isCollective() );
        attributeTypes[$ii].setObsolete( $attrType.isObsolete() );
        attributeTypes[$ii].setCanUserModify( $attrType.isCanUserModify() );
        attributeTypes[$ii].setLength( $attrType.getLength() );

        // set the superior attribute type
        superiorOid = "$!attrType.getSuperiorOid()";
        if ( ! superiorOid.equals("") )
        {
            attributeTypes[$ii].setSuperior( attrTypeReg.lookup( superiorOid ) );
        }

        // set usage enumeration value
        usage = "$attrType.getUsage().getName()";
        attributeTypes[$ii].setUsageEnum( UsageEnum.getUsageEnum( usage ) );

        // set the equality matching rule
        mruleOid = "$!attrType.getEqualityOid()";
        if ( ! mruleOid.equals("") )
        {
            attributeTypes[$ii].setEquality( mruleReg.lookup( mruleOid ) );
        }

        // set the substr matching rule
        mruleOid = "$!attrType.getSubstrOid()";
        if ( ! mruleOid.equals("") )
        {
            attributeTypes[$ii].setSubstr( mruleReg.lookup( mruleOid ) );
        }

        // set the ordering matching rule
        mruleOid = "$!attrType.getOrderingOid()";
        if ( ! mruleOid.equals("") )
        {
            attributeTypes[$ii].setOrdering( mruleReg.lookup( mruleOid ) );
        }


        #end

        return attributeTypes;
    }


    private static class MutableAttributeType extends BaseAttributeType
    {
        public MutableAttributeType( String oid )
        {
            super( oid );
        }
    }
}
