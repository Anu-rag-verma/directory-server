<?xml version="1.0" encoding="ISO-8859-1"?>  
 
<project xmlns:j="jelly:core" xmlns:ant="jelly:ant" xmlns:util="jelly:util" xmlns:maven="jelly:maven">

  <goal name="eve:init">
	<!-- Dir for generated source files -->
	<j:set var="eveTargetDir" value="${maven.eve.schema.target.dir}"/>
	<j:set var="eveSchemaDir" value="${maven.eve.schema.dir}"/>
	<j:set var="eveSchemas" value="${maven.eve.schemas}"/>
  </goal>

  <goal name="eve:prepare-filesystem">
    <j:if test="${!eveTargetDir.equals('MAVEN_EVE_TARGET_DIR_NOT_SET')}">
      <ant:mkdir dir="${maven.build.dir}/schema"/>
    </j:if>
  </goal>

  <goal name="eve:generate"
        prereqs="eve:prepare-filesystem">
        
    <j:if test="${!eveTargetDir.equals('MAVEN_EVE_TARGET_DIR_NOT_SET')}">
      <ant:path id="maven.eve.schema.compile.src.set"
            location="${maven.build.dir}/schema"/>

      <maven:addPath id="maven.compile.src.set"
                     refid="maven.eve.schema.compile.src.set"/>

      <!-- TODO: use this for src.dir, but smarter for individual schemas -->
      <!-- TODO: it seems that if target exists but the flagfile doesn't, it doesn't compile? -->
      <ant:uptodate property="maven.eve.schema.buildNotRequired" targetfile="${maven.build.dir}/schema/.flagfile">
        <ant:srcfiles
          dir   = "${maven.eve.schema.dir}"
          includes = "*.schema"/>
      </ant:uptodate>
      
      <j:set var="eveSchemaBuildNotRequired" value="${maven.eve.schema.buildNotRequired}" />
      <j:if test="${eveSchemaBuildNotRequired == null}">
      
        <j:if test="${!eveSchemas.equals('MAVEN_EVE_SCHEMAS_NOT_SET')}">
          <util:tokenize var="schemas" delim=",">
            ${maven.eve.schemas}
          </util:tokenize>
          
          <j:forEach var="schema" items="${schemas.iterator()}">
          
            <j:set var="ownerProp" value="maven.eve.schema.owner.${schema}"/>
            <j:set var="owner" value="${context.getVariable(ownerProp)}"
            	defaultValue="${maven.eve.schema.ownerDefault}"/>
			
            <j:set var="packageProp" value="maven.eve.schema.package.${schema}"/>
            <j:set var="package" value="${context.getVariable(packageProp)}"
            	defaultValue="${maven.eve.schema.packageDefault}"/>
			
            <j:set var="depsProp" value="maven.eve.schema.deps.${schema}"/>
            <j:set var="deps" value="${context.getVariable(depsProp)}"/>

			<!--
			<echo>======= schema: ${schema} ======= </echo>
			<echo>maven.eve.schema.owner.${schema} = ${owner}</echo>
			<echo>maven.eve.schema.package.${schema} = ${package}</echo>
			<echo>maven.eve.schema.deps.${schema} = ${deps}</echo>
			-->

			<j:useBean var="task" class="org.apache.eve.tools.schema.EveSchemaToolTask" 
				name="${schema}" owner="${owner}" package="${package}" dependencies="${deps}"/>
			<j:expr value="${task.execute()}"/>
          </j:forEach>
          
        </j:if>
        
        <ant:touch file="${maven.build.dir}/schema/.flagfile" />
      </j:if>
      
    </j:if>
  </goal>


  <preGoal name="java:compile">
    <j:if test="${!eveSchemaDir.equals('MAVEN_EVE_SCHEMA_DIR_NOT_SET')}">
      <attainGoal name="eve:generate"/>
    </j:if>
  </preGoal>

  <goal name="eve"> 
    <attainGoal name="eve:init"/>
    <attainGoal name="eve:generate"/>
  </goal> 
  
</project> 

