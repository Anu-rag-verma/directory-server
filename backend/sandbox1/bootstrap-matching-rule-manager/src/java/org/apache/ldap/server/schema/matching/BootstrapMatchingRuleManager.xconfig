  <!-- ===================================================================

    The following private LDAPd IANA numbers are reserved for backends:
        
        1.2.6.1.4.1.18060.1
        
    The following private LDAPd IANA number base is reserved for use by
    the SystemBackend specifically:
    
        1.2.6.1.4.1.18060.1.1
        
    The following private LDAPd IANA number base is reserved for use by
    SystemBackend Syntaxes:
    
        1.2.6.1.4.1.18060.1.1.1
        
    The following private LDAPd IANA number base is reserved for use by
    SystemBackend MatchingRules:
    
        1.2.6.1.4.1.18060.1.1.2
            
            * 1.2.6.1.4.1.18060.1.1.2.1 - tolowerDeepTrimDNMatch
            * 1.2.6.1.4.1.18060.1.1.2.2 - exactDNMatch
        
    The following private LDAPd IANA number base is reserved for use by
    SystemBackend AttributeTypes:
    
        1.2.6.1.4.1.18060.1.1.3
        
            * 1.2.6.1.4.1.18060.1.1.3.1 - _ndn
            * 1.2.6.1.4.1.18060.1.1.3.2 - _updn
            * 1.2.6.1.4.1.18060.1.1.3.3 - _existance
            * 1.2.6.1.4.1.18060.1.1.3.4 - _hierarchy

    The following private LDAPd IANA number base is reserved for use by
    SystemBackend ObjectClasses:
    
        1.2.6.1.4.1.18060.1.1.4

  ==================================================================== -->
    
<configuration>

    <!-- ===============================================================
                            Private MatchingRules
    ================================================================ -->
    
    <matching-rule>
        <oid>1.2.6.1.4.1.18060.1.1.2.1</oid>
        <name>tolowerDeepTrimDNMatch</name>
        <syntax>1.3.6.1.4.1.1466.115.121.1.12</syntax>
        <description>
            When performing multiple adjoining whitespace characters are 
            treated the same as an individual space, and leading and trailing 
            whitespace is ignored within a name component.  The equality
            matchingRule for the attributeType of a name component's attribute
            is presumed to be caseIgnoreMatch when determining the means to 
            normalize its value.  Obviously such normalization is independent 
            of schema.  
            
            This matching rule is used by the attributeType for the normalized 
            dn index.  It makes the SystamBackend namingContext very sensitive
            to the attributeTypes used to construct distinguished and relative
            distinguished names.  Attributes used as components within a 
            distinguished name must use the caseIgnoreMatch matchingRule for 
            equality matching.  The use of caseExactMatch equality matching
            attributes within distinguished name components will appear to cause
            a loss of case resolution: case differentiation is not possible within
            the DN and its components.
        </description>
                
        <comparator>
            <built-in>compareDeepTrimToLowerDN</built-in>
        </comparator>
                
        <normalizer>
            <built-in>deepTrimToLowerDN</built-in>
        </normalizer>
    </matching-rule>
    
    <matching-rule>
        <oid>1.2.6.1.4.1.18060.1.1.2.2</oid>
        <name>exactDNMatch</name>
        <syntax>1.3.6.1.4.1.1466.115.121.1.15</syntax>
        <description>
            When performing multiple adjoining whitespace characters are 
            treated as is.  The equality matchingRule for the attributeType of 
            a name component's attribute is presumed to be caseExactMatch so 
            essentially no value normalization occurs.

            This matching rule is used by the attributeType for the user provide
            dn index.  It enables the directory server to return distinguished 
            names as they were provided by the user without formating.
        </description>
                
        <comparator>
            <built-in>compareExactDN</built-in>
        </comparator>
                
        <normalizer>
            <built-in>as-is</built-in>
        </normalizer>
    </matching-rule>

    <!-- ===============================================================
                            Public MatchingRules
    ================================================================ -->

    <matching-rule>
        <oid>2.5.13.1</oid>
        <name>distinguishedNameMatch</name>
        <syntax>1.3.6.1.4.1.1466.115.121.1.12</syntax>
        <description>
            When performing multiple adjoining whitespace characters are 
            treated the same as an individual space, and leading and trailing 
            whitespace is ignored within a name component.  The equality
            matchingRule for the attributeType of a name component's attribute
            is presumed to be caseIgnoreMatch when determining the means to 
            normalize its value.  Obviously such normalization is independent 
            of schema.  
            
            This matching rule is used by the attributeType for the normalized 
            dn index.  It makes the SystamBackend namingContext very sensitive
            to the attributeTypes used to construct distinguished and relative
            distinguished names.  Attributes used as components within a 
            distinguished name must use the caseIgnoreMatch matchingRule for 
            equality matching.  The use of caseExactMatch equality matching
            attributes within distinguished name components will appear to cause
            a loss of case resolution: case differentiation is not possible within
            the DN and its components.
        </description>
                
        <comparator>
            <built-in>compareDeepTrimToLowerDN</built-in>
        </comparator>
                
        <normalizer>
            <built-in>deepTrimToLowerDN</built-in>
        </normalizer>
    </matching-rule>
    
    <matching-rule>
        <oid>2.5.13.2</oid>
        <name>caseIgnoreMatch</name>
        <syntax>1.3.6.1.4.1.1466.115.121.1.15</syntax>
        <description>
            When performing the caseIgnoreMatch, caseIgnoreListMatch, 
            telephoneNumberMatch, caseExactIA5Match and caseIgnoreIA5Match, 
            multiple adjoining whitespace characters are treated the same 
            as an individual space, and leading and trailing whitespace is 
            ignored.
        </description>
                
        <comparator>
            <built-in>compareToIgnoreCase</built-in>
        </comparator>
                
        <normalizer>
            <built-in>deepTrimToLower</built-in>
        </normalizer>
    </matching-rule>
    
    <matching-rule>
        <oid>2.5.13.4</oid>
        <name>caseIgnoreSubstringsMatch</name>
        <syntax>1.3.6.1.4.1.1466.115.121.1.58</syntax>
        <description>
            The Substring Assertion is encoded according to the following BNF: 

                substring = [initial] any [final]
                initial = value
                any = "*" *(value "*")
                final = value

            The production is UTF-8 encoded string. Should the backslash or 
            asterix characters be present in a production of , they are quoted 
            as described in section 4.3. 
        </description>
                
        <comparator>
            <built-in>compareToIgnoreCase</built-in>
        </comparator>
                
        <normalizer>
            <built-in>deepTrimToLower</built-in>
        </normalizer>
    </matching-rule>

    <matching-rule>
        <oid>2.5.13.14</oid>
        <name>integerMatch</name>
        <syntax>1.3.6.1.4.1.1466.115.121.1.27</syntax>
        <description>
            Matches integers as strings.
        </description>
                
        <comparator>
            <built-in>compareBigInteger</built-in>
        </comparator>
                
        <normalizer>
            <built-in>as-is</built-in>
        </normalizer>
    </matching-rule>

    <matching-rule>
        <oid>2.5.13.0</oid>
        <name>objectIdentifierMatch</name>
        <syntax>1.3.6.1.4.1.1466.115.121.1.38</syntax>
        
        <description>
            The assertion syntax is the same as the value syntax. If the client 
            supplies a filter using an objectIdentifierMatch whose matchValue oid
            is in the "descr" form, and the oid is not recognized by the server, 
            then the filter is Undefined. 
        </description>

        <comparator>
            <built-in>compareObjectIdentifier</built-in>
        </comparator>
        
        <normalizer>
            <built-in>objectIdentifierNormalizer</built-in>
        </normalizer>
    </matching-rule>
    
    <matching-rule>
        <oid>2.5.13.23</oid>
        <name>uniqueMemberMatch</name>
        <syntax>1.3.6.1.4.1.1466.115.121.1.34</syntax>
        
        <description>
            The assertion syntax is the same as the value syntax. 
        </description>

        <comparator>
            <built-in>compareDeepTrimToLowerDN</built-in>
        </comparator>
        
        <normalizer>
            <built-in>deepTrimToLowerDN</built-in>
        </normalizer>
    </matching-rule>
    
    
</configuration>
